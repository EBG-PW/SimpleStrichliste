<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title id="pageTitle"></title>
    <script>
      const lang = <%- JSON.stringify(language) %>
    </script>
    <script src="<%= domain %>/libjs/i18next.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/libjs/tailwind.js?<%= curentUnixTime %>"></script>
  </head>

  <body class="bg-gray-100 font-sans flex flex-col min-h-screen">
    <main class="flex-grow flex flex-col items-center justify-center p-4">
      <div id="reg-container" class="w-full max-w-md">
        <div class="text-gray-500">
          <div class="bg-white rounded-xl shadow-lg p-8">
            <div class="text-center mb-8">
              <h1 class="text-2xl font-bold text-gray-800" data-translate="Setup.Welcome"></h1>
              <p class="text-gray-600 mt-2" data-translate="Setup.WelcomeDescription"></p>
            </div>
            <form id="reg-form" class="space-y-4">
              <div>
                <label for="name" class="block text-sm font-medium text-gray-700" data-translate="Setup.Form.Name"></label>
                <input type="text" id="name" name="name" required class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
              </div>
              <div>
                <label for="email" class="block text-sm font-medium text-gray-700" data-translate="Setup.Form.Email"></label>
                <input type="email" id="email" name="email" required class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
              </div>
              <div>
                <label for="username" class="block text-sm font-medium text-gray-700" data-translate="Setup.Form.Username"></label>
                <input type="text" id="username" name="username" required class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
              </div>
              <div>
                <label for="password" class="block text-sm font-medium text-gray-700" data-translate="Setup.Form.Password"></label>
                <input type="password" id="password" name="password" required class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
              </div>
              <div>
                <label for="password-repeat" class="block text-sm font-medium text-gray-700" data-translate="Setup.Form.PasswordRepeat"></label>
                <input type="password" id="password-repeat" name="password-repeat" required class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
              </div>
              <div>
                <label for="reg_code" class="block text-sm font-medium text-gray-700 hidden" data-translate="Setup.Form.RegCode"></label>
                <input type="text" id="reg_code" name="reg_code" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 hidden" />
              </div>
              <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" data-translate="Setup.Form.Submit"></button>
            </form>
            <div id="form-feedback" class="mt-4 text-center"></div>
          </div>
        </div>
      </div>
    </main>

    <%- html_content.footer %>

    <script src="<%= domain %>/appjs/translate.js?<%= curentUnixTime %>"></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const regContainer = document.getElementById("reg-container");

        const urlParams = new URLSearchParams(window.location.search);
        const regCodeFromUrl = urlParams.get("REGCODE");
        const regCodeInput = document.getElementById("reg_code");
        if (regCodeFromUrl) {
          regCodeInput.value = regCodeFromUrl;
        }

        // Attach event listener to the form
        document.getElementById("reg-form").addEventListener("submit", handleFormSubmit);

        /**
         * Handles the submission of the reg form.
         */
        async function handleFormSubmit(event) {
          event.preventDefault();
          const form = event.target;
          const feedbackDiv = document.getElementById("form-feedback");
          const submitButton = form.querySelector('button[type="submit"]');

          submitButton.disabled = true;
          feedbackDiv.innerHTML = "";

          try {
            if (form.password.value !== form["password-repeat"].value) {
              throw new Error(i18next.t("Setup.Error.PasswordMismatch"));
            }
            const response = await fetch("/api/v1/users", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                name: form.name.value,
                email: form.email.value,
                username: form.username.value,
                password: form.password.value,
                reg_code: form.reg_code.value,
              }),
            });

            const response_json = await response.json();

            if (response.ok) {
              regContainer.innerHTML = `
                <div class="bg-white rounded-xl shadow-lg p-8 text-center">
                  <h1 class="text-2xl font-bold text-green-600">${i18next.t("Setup.UserCreated")}</h1>
                  <p class="text-gray-600 mt-2">${i18next.t("Setup.UserCreatedDescription")}</p>
                  <a href="/login" class="mt-4 inline-block py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">Zum Login</a>
                </div>`;
            } else {
              if (response.status === 500) throw new Error(i18next.t("Error.UnknownError"));

              if (response.status === 403) {
                const regCodeLabel = document.querySelector('label[for="reg_code"]');
                regCodeLabel.classList.remove("hidden");
                regCodeInput.classList.remove("hidden");
                throw new Error(i18next.t("Setup.Error.InvalidRegCode"));
              }

              if (response.status === 409) throw new Error(i18next.t("Setup.Error.UserExists"));

              if (typeof response_json.reason === "string") {
                feedbackDiv.innerHTML = '<div class="alert alert-danger">' + i18next.t(`Error.${response_json.message}`) + "</div>";
                submitButton.disabled = false;
                return;
              }
              const input_name = response_json.reason[0].path[0];
              const input_type = response_json.reason[0].type;
              for (const key in keys) {
                document.getElementById(keys[key]).classList.remove("is-invalid");
              }

              feedbackDiv.innerHTML = '<div class="alert alert-danger">' + i18next.t(`Error.Joi.${input_type}`, { field: i18next.t(`Setup.Form.${capitalizeFirstLetter(input_name)}`), limit: response_json.reason[0].context?.limit }) + "</div>";
              document.getElementById(keys[input_name]).classList.add("is-invalid");
              submitButton.disabled = false;
            }
          } catch (error) {
            feedbackDiv.innerHTML = `<p class="text-red-500">${error.message}</p>`;
            submitButton.disabled = false;
          }
        }
      });
    </script>
  </body>
</html>
