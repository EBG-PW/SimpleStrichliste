<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title id="pageTitle">Account Settings</title>

    <script>
      const lang = <%- JSON.stringify(language) %>;
    </script>
    <script src="<%= domain %>/libjs/i18next.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/libjs/tailwind.js?<%= curentUnixTime %>"></script>

    <style>
      .loader {
        border-top-color: #3498db;
        -webkit-animation: spinner 1.5s linear infinite;
        animation: spinner 1.5s linear infinite;
      }
      @-webkit-keyframes spinner {
        0% {
          -webkit-transform: rotate(0deg);
        }
        100% {
          -webkit-transform: rotate(360deg);
        }
      }
      @keyframes spinner {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    </style>
  </head>
  <body class="bg-gray-100">
    <!-- Navbar placeholder restored -->
    <%- html_content.navbar %>

    <main class="container mx-auto p-4 md:p-6">
      <header class="flex items-center mb-6">
        <a href="/admin/users" aria-label="Go back" class="text-gray-500 hover:text-gray-800 mr-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
        </a>
        <h1 class="text-3xl font-bold text-gray-800" data-translate="AdminUsers.PageTitle"></h1>
      </header>

      <div id="settings-content" class="space-y-8">
        <div class="w-full max-w-2xl mx-auto bg-white rounded-xl shadow-md overflow-hidden md:max-w-3xl">
          <div class="p-8 md:p-12">
            <div id="loading-spinner" class="flex justify-center items-center h-64">
              <div class="loader ease-linear rounded-full border-8 border-t-8 border-gray-200 h-32 w-32"></div>
            </div>
            <div id="profile-form-container" class="hidden">
              <h1 class="text-3xl font-bold text-gray-900 mb-2" data-translate="Settings.Form.Headline"></h1>
              <p class="text-gray-500 mb-8" data-translate="Settings.Form.OtherDescription"></p>
              <form id="profile-form" class="space-y-6">
                <div>
                  <label for="username" class="block text-sm font-medium text-gray-700" data-translate="Setup.Form.Username"></label>
                  <input type="text" onchange="updateProfileField(this.id, this.value)" name="username" id="username" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                </div>
                <div>
                  <label for="name" class="block text-sm font-medium text-gray-700" data-translate="Setup.Form.Name"></label>
                  <input type="text" onchange="updateProfileField(this.id, this.value)" name="name" id="name" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                </div>
                <div>
                  <label for="email" class="block text-sm font-medium text-gray-700" data-translate="Setup.Form.Email"></label>
                  <input type="email" onchange="updateProfileField(this.id, this.value)" name="email" id="email" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                </div>
                <div>
                  <label for="language" class="block text-sm font-medium text-gray-700" data-translate="Setup.Form.Language"></label>
                  <select id="language" onchange="updateProfileField(this.id, this.value)" name="language" class="mt-1 block w-full px-4 py-3 border-gray-300 bg-white rounded-lg shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    <% for(const code in countryConfig) { %>
                    <option value="<%= code %>"><%= countryConfig[code] %></option>
                    <% } %>
                  </select>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      <div id="message-box-container" class="fixed bottom-5 right-5 w-full max-w-xs">
        <div id="message-box" class="hidden mt-4 p-4 rounded-lg shadow-lg"></div>
      </div>
    </main>

    <!-- Script links restored -->
    <script src="<%= domain %>/appjs/permission.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/translate.js?<%= curentUnixTime %>"></script>
    <script>
      // --- DOM Elements ---
      const profileForm = document.getElementById("profile-form");
      const usernameInput = document.getElementById("username");
      const nameInput = document.getElementById("name");
      const emailInput = document.getElementById("email");
      const passwordInput = document.getElementById("password");
      const passwordForm = document.getElementById("password-form");
      const currentPasswordInput = document.getElementById("current-password");
      const newPasswordInput = document.getElementById("new-password");
      const confirmPasswordInput = document.getElementById("confirm-password");
      const languageSelect = document.getElementById("language");
      const saveButton = document.getElementById("save-button");
      const messageBox = document.getElementById("message-box");
      const loadingSpinner = document.getElementById("loading-spinner");
      const formContainer = document.getElementById("profile-form-container");

      /**
       * Shows a message to the user.
       * @param {string} text - The message to display.
       * @param {('success'|'error')} type - The type of message.
       */
      function showMessage(text, type = "success") {
        messageBox.textContent = text;
        messageBox.className = `mt-4 p-4 rounded-lg ${type === "success" ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`;
        messageBox.classList.remove("hidden");
        setTimeout(() => {
          messageBox.classList.add("hidden");
        }, 4000);
      }

      /**
       * Fetches user data and populates the form fields.
       */
      async function loadUserData() {
        loadingSpinner.classList.remove("hidden");
        formContainer.classList.add("hidden");
        try {
          const response = await fetch("/api/v1/admin/user/<%= params.uuid %>", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          });
          if (!response.ok) {
            throw new Error("Failed to fetch user data.");
          }
          const user = await response.json();

          usernameInput.value = user.username;
          nameInput.value = user.name;
          emailInput.value = user.email;
          languageSelect.value = user.language;

          loadingSpinner.classList.add("hidden");
          formContainer.classList.remove("hidden");
        } catch (error) {
          console.error("Error loading user data:", error);
          loadingSpinner.innerHTML = `<p class="text-red-500">${i18next.t("Settings.ErrorLoadingUserData")}</p>`;
        }
      }
      /**
       * Updates a user profile field.
       * @param {string} field - The field to update (username, name, email, language).
       * @param {string} value - The new value for the field.
       */
      async function updateProfileField(field, value) {
        const inputField = document.getElementById(field);
        if (!inputField) return;

        try {
          const response = await fetch(`/api/v1/admin/user/<%= params.uuid %>/${field}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
            body: JSON.stringify({ [field]: value }),
          });

          const response_json = await response.json();
          if (response.ok) {
            showMessage(i18next.t("Settings.SettingsUpdatedSuccsess", { Setting: i18next.t(`Setup.Form.${field.charAt(0).toUpperCase() + field.slice(1)}`) }));
            inputField.classList.add("ring-2", "ring-green-500");

              setTimeout(() => {
              inputField.classList.remove("ring-2", "ring-green-500");
            }, 5000);
          } else {
            if (typeof response_json.reason === "string") {
              showMessage(i18next.t(`Error.${response_json.message}`));
              return;
            }
            const input_name = response_json.reason[0].path[0];
            const input_type = response_json.reason[0].type;
            document.getElementById(field).classList.remove("is-invalid");

            showMessage(i18next.t(`Error.Joi.${input_type}`, { field: i18next.t(`Setup.Form.${capitalizeFirstLetter(input_name)}`), limit: response_json.reason[0].context?.limit }), "error");
            document.getElementById(field).classList.add("is-invalid");

            inputField.classList.add("ring-2", "ring-red-500");
            setTimeout(() => {
              inputField.classList.remove("ring-2", "ring-red-500");
            }, 5000);
          }
        } catch (error) {
          console.error(`Error updating ${field}:`, error);
        }
      }

      // --- Initial Load ---
      document.addEventListener("DOMContentLoaded", () => {
        loadUserData();
      });
    </script>
  </body>
</html>
