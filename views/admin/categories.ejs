<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title id="pageTitle">Kategorien</title>
    <script>
      const lang = <%- JSON.stringify(language) %>;
    </script>
    <script src="<%= domain %>/libjs/i18next.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/libjs/tailwind.js?<%= curentUnixTime %>"></script>
    <style>
      body {
        padding-bottom: 80px;
      }
      .toggle-checkbox:checked + .toggle-label .toggle-dot {
        transform: translateX(100%);
      }
      .toggle-checkbox:checked + .toggle-label {
        background-color: #3b82f6;
      }
    </style>
  </head>

  <body class="bg-gray-100">
    <%- html_content.navbar %>

    <main class="container mx-auto p-4 md:p-6">
      <header class="flex items-center mb-6">
        <a href="/admin/index" aria-label="Go back" class="text-gray-500 hover:text-gray-800 mr-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
        </a>
        <h1 class="text-2xl md:text-3xl font-bold text-gray-800" data-translate="Categories.PageTitle"></h1>
      </header>
      
      <p class="text-gray-600 mb-4" data-translate="Categories.Description"></p>

      <div id="categories-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"></div>
    </main>

    <script src="<%= domain %>/appjs/permission.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/translate.js?<%= curentUnixTime %>"></script>

    <script>
      const categoriesGrid = document.getElementById("categories-grid");

      /**
       * Creates the HTML for a single category card using data from the API.
       */
      const createCategoryCard = (category) => {
        const isChecked = category.enabled ? "checked" : "";
        const iconHtml = category.icon || "";

        return `
        <div class="bg-white rounded-xl shadow-lg p-4 flex items-center justify-between">
            <div class="flex items-center">
                <div class="w-8 h-8 flex items-center justify-center">${iconHtml}</div>
                <span class="font-medium text-gray-800 ml-3">${i18next.t(`Categories.${category.name}`)}</span>
            </div>
            
            <label class="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" onchange="toggleCategory('${category.name}')" id="category-${category.name}" class="sr-only toggle-checkbox" ${isChecked}>
                
                <div class="toggle-label w-11 h-6 bg-gray-200 rounded-full">

                    <div class="toggle-dot absolute top-[2px] left-[2px] bg-white border-gray-300 border rounded-full h-5 w-5 transition-transform"></div>
                </div>
            </label>
        </div>
        `;
      };

      const loadAndDisplay = async () => {
        try {
          const response = await apiFetch("/api/v1/categories");

          if (!response.ok) {
            throw new Error("Failed to fetch categories");
          }

          const data = await response.json();
          const allCategories = data.categories;

          categoriesGrid.innerHTML = "";

          allCategories.forEach((category) => {
            categoriesGrid.innerHTML += createCategoryCard(category);
          });
        } catch (error) {
          console.error(error);
          categoriesGrid.innerHTML = `<p class="text-red-500">${i18next.t("Errors.NetworkError")}</p>`;
        }
      };

      const toggleCategory = async (categoryName) => {
        const checkbox = document.getElementById(`category-${categoryName}`);
        if (!checkbox) return;

        const isEnabled = checkbox.checked;

        try {
          const response = await apiFetch(`/api/v1/categories/${categoryName}`, {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ enabled: isEnabled }),
          });

          if (!response.ok) {
            throw new Error(`Server responded with status: ${response.status}`);
          }
        } catch (error) {
          console.error("Failed to update category. Reverting toggle.", error);
          checkbox.checked = !isEnabled;
          alert(i18next.t("Errors.CategoryUpdateFailed"));
        }
      };

      document.addEventListener("DOMContentLoaded", () => {
        loadAndDisplay();
      });
    </script>
  </body>
</html>
