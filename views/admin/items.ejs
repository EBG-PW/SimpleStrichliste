<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title id="pageTitle">Artikel verwalten</title>
    <script>
      const lang = <%- JSON.stringify(language) %>;
    </script>
    <script src="<%= domain %>/libjs/i18next.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/libjs/tailwind.js?<%= curentUnixTime %>"></script>
    <style>
      body {
        padding-bottom: 80px;
      }
      .item-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
      }
      .item-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
      }
    </style>
  </head>
  <body class="bg-gray-100">
    <%- html_content.navbar %>

    <main class="container mx-auto p-4">
      <div class="flex items-center mb-6">
        <a href="/admin/index" aria-label="Go back" class="text-gray-500 hover:text-gray-800 mr-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
        </a>
        <h1 class="text-2xl font-bold" data-translate="Items.Title"></h1>
      </div>

      <div class="mb-6">
        <input type="search" id="search-input" data-translate-placeholder="Items.SearchPlaceholder" class="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" />
      </div>
      <div id="categories-container"></div>
    </main>

    <script src="<%= domain %>/appjs/permission.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/translate.js?<%= curentUnixTime %>"></script>
    <script>
      const categoriesContainer = document.getElementById("categories-container");

      const createItemCard = (item) => {
        const stockColor = item.stock < item.target_stock * 0.25 ? "text-red-500" : item.stock < item.target_stock * 0.5 ? "text-orange-500" : item.stock < item.target_stock * 0.75 ? "text-yellow-500" : "text-green-500";
        return `
        <a href="/admin/${item.uuid}/edititems" class="block">
            <div class="item-card bg-white rounded-xl shadow-lg p-4 h-full flex items-center gap-4 transition-transform transform hover:scale-105">
                <img src="/i/items/${item.uuid}" alt="${item.name}" class="w-16 h-16 md:w-20 md:h-20 object-cover rounded-lg flex-shrink-0">
                
                <div class="flex-grow flex flex-col">
                    <h3 class="font-bold text-lg text-gray-800 truncate">${item.name}</h3>
                    
                    <div class="mt-2 flex items-baseline gap-4 flex-wrap">
                        <p class="text-green-600 font-semibold text-md">${item.price.toFixed(2).replace(".", ",")} â‚¬</p>
                        <p class="text-sm ${stockColor}">Lager: ${item.stock} / ${item.target_stock}</p>
                    </div>
                </div>
            </div>
        </a>
      `};

      const createAddItemCard = (categoryName) => {
        const createUrl = `/admin/additems?category=${encodeURIComponent(categoryName)}`;
        return `
        <a href="${createUrl}" class="block h-full">
            <div class="item-card bg-white rounded-xl shadow-lg p-4 h-full flex items-center justify-start gap-4 border-2 border-dashed border-gray-300 hover:border-blue-500 hover:text-blue-500 text-gray-400 transition-colors">
                <div class="w-16 h-16 md:w-20 md:h-20 flex items-center justify-center bg-gray-50 rounded-lg flex-shrink-0">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
                    </svg>
                </div>
                <span class="font-semibold text-lg" data-translate="Items.Button.Create">Neuer Artikel</span>
            </div>
        </a>
      `};

      let debounceTimer;
      const debounce = (callback, time) => {
        return (...args) => {
          window.clearTimeout(debounceTimer);
          debounceTimer = setTimeout(() => {
            callback(...args);
          }, time);
        };
      };

      const loadAndRenderItems = async (searchQuery = "") => {
        categoriesContainer.innerHTML = `<p class="text-center text-gray-500">${i18next.t("Items.Loading")}</p>`;

        try {
          const url = new URL(`${window.location.origin}/api/v1/items/grouped`);
          if (searchQuery && searchQuery.trim() !== "") {
            url.searchParams.append("query", searchQuery.trim());
          }

          const response = await apiFetch(url.toString(), {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (!response.ok) throw new Error("Failed to fetch items");

          const groupedItems = await response.json();
          categoriesContainer.innerHTML = "";

          // Handle case where no items are found
          if (Object.keys(groupedItems).length === 0) {
            categoriesContainer.innerHTML = `<p class="text-center text-gray-500">${i18next.t("Items.NoResults")}</p>`;
          } else {
            for (const categoryName in groupedItems) {
              const items = groupedItems[categoryName];

              const categoryHeader = `<h2 class="text-2xl font-bold mt-8 mb-4">${i18next.t(`Categories.${categoryName}`)}</h2>`;
              const gridContainer = document.createElement("div");
              gridContainer.className = "grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4";

              let cardsHtml = "";
              items.forEach((item) => {
                cardsHtml += createItemCard(item);
              });

              cardsHtml += createAddItemCard(categoryName);
              gridContainer.innerHTML = cardsHtml;

              categoriesContainer.innerHTML += categoryHeader;
              categoriesContainer.appendChild(gridContainer);
            }
          }
        } catch (error) {
          console.error("Failed to load items:", error);
          categoriesContainer.innerHTML = `<p class="text-red-500 text-center">${i18next.t("Items.LoadFailed")}</p>`;
        }
      };

      document.addEventListener("DOMContentLoaded", () => {
        const searchInput = document.getElementById("search-input");
        const debouncedLoad = debounce(loadAndRenderItems, 300);

        // Add event listener to the search input
        searchInput.addEventListener("input", (event) => {
          debouncedLoad(event.target.value);
        });

        loadAndRenderItems();
      });
    </script>
  </body>
</html>
