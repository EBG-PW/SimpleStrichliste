<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title id="pageTitle">Artikel verwalten</title>
    <script>
      const lang = <%- JSON.stringify(language) %>;
    </script>
    <script src="<%= domain %>/libjs/i18next.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/libjs/tailwind.js?<%= curentUnixTime %>"></script>
    <style>
      body {
        padding-bottom: 80px;
      }
      .item-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
      }
      .item-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
      }
    </style>
  </head>
  <body class="bg-gray-100">
    <%- html_content.navbar %>

    <main class="container mx-auto p-4">
      <h1 class="text-3xl font-bold mb-8" data-translate="Items.ManageTitle">Artikel verwalten</h1>

      <div id="categories-container"></div>
    </main>

    <script src="<%= domain %>/appjs/permission.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/translate.js?<%= curentUnixTime %>"></script>
    <script>
      const categoriesContainer = document.getElementById("categories-container");

      const createItemCard = (item) => {
        return `
            <a href="/admin/edititem/${item.uuid}" class="block">
              <div class="item-card bg-white rounded-xl shadow-lg p-4 h-full flex flex-col items-center text-center">
                <img src="/i/items/${item.uuid}" alt="${item.name}" class="w-24 h-24 object-cover rounded-full mb-4">
                <h3 class="font-bold text-lg text-gray-800 flex-grow">${item.name}</h3>
                <p class="text-green-600 font-semibold text-md mt-2">${item.price.toFixed(2).replace(".", ",")} â‚¬</p>
                <p class="text-xs text-gray-400 mt-2">Lager: ${item.stock}</p>
              </div>
            </a>
          `;
      };

      const createAddItemCard = (categoryName) => {
        const createUrl = `/admin/additems?category=${encodeURIComponent(categoryName)}`;
        return `
            <a href="${createUrl}" class="block h-full">
              <div class="item-card bg-white rounded-xl shadow-lg p-4 h-full flex flex-col items-center justify-center text-center border-2 border-dashed border-gray-300 hover:border-blue-500 hover:text-blue-500 text-gray-400">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
                </svg>
                <span class="mt-2 font-semibold text-sm" data-translate="Items.Button.Create"></span>
              </div>
            </a>
          `;
      };

      const loadAndRenderItems = async () => {
        categoriesContainer.innerHTML = `<p class="text-center text-gray-500" data-translate="Items.Loading"></p>`;

        try {
          const response = await apiFetch("/api/v1/items/grouped");

          if (!response.ok) throw new Error("Failed to fetch items");

          const groupedItems = await response.json();
          categoriesContainer.innerHTML = "";

          for (const categoryName in groupedItems) {
            const items = groupedItems[categoryName];

            const categoryHeader = `<h2 class="text-2xl font-bold mt-8 mb-4">${categoryName}</h2>`;
            const gridContainer = document.createElement("div");
            gridContainer.className = "grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4";

            let cardsHtml = "";
            items.forEach((item) => {
              cardsHtml += createItemCard(item);
            });

            cardsHtml += createAddItemCard(categoryName);

            gridContainer.innerHTML = cardsHtml;

            categoriesContainer.innerHTML += categoryHeader;
            categoriesContainer.appendChild(gridContainer);
          }
        } catch (error) {
          console.error("Failed to load items:", error);
          categoriesContainer.innerHTML = `<p class="text-red-500 text-center">Fehler beim Laden der Artikel.</p>`;
        }
      };

      document.addEventListener("DOMContentLoaded", () => {
        loadAndRenderItems();
      });
    </script>
  </body>
</html>
