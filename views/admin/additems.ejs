<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title id="pageTitle"></title>
    <link rel="stylesheet" href="<%= domain %>/css/cropper.min.css?<%= curentUnixTime %>">
    <%- html_content.manifest %>
    <script>
      const lang = <%- JSON.stringify(language) %>;
    </script>
    <script src="<%= domain %>/libjs/i18next.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/libjs/tailwind.js?<%= curentUnixTime %>"></script>
  </head>
  <body class="bg-gray-100">
    <%- html_content.navbar %>

    <main class="container mx-auto p-4">
      <div class="flex items-center mb-6">
        <a href="/admin/items" aria-label="Back to items list" class="text-gray-600 hover:text-gray-800 mr-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" />
          </svg>
        </a>
        <h2 class="text-2xl md:text-3xl font-bold text-gray-800" data-translate="Items.PageTitle"></h2>
      </div>

      <div class="w-full max-w-2xl mx-auto">
        <div class="bg-white rounded-xl shadow-md overflow-hidden">
          <div class="p-8 md:p-12">
            <h1 class="text-3xl font-bold text-gray-900 mb-2" data-translate="Items.Create.Headline"></h1>
            <p class="text-gray-500 mb-8" data-translate="Items.Create.Description"></p>

            <form id="create-item-form" class="space-y-6">
              <div>
                <label for="name" class="block text-sm font-medium text-gray-700" data-translate="Items.Form.Name"></label>
                <input type="text" name="name" id="name" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500" required />
              </div>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="packSize" class="block text-sm font-medium text-gray-700" data-translate="Items.Form.PackSize"></label>
                  <input type="number" name="packSize" id="packSize" min="0" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />
                </div>
                <div>
                  <label for="packPrice" class="block text-sm font-medium text-gray-700" data-translate="Items.Form.PackPrice"></label>
                  <input type="number" name="packPrice" id="packPrice" step="0.01" min="0" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />
                </div>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="price" class="block text-sm font-medium text-gray-700" data-translate="Items.Form.Price"></label>
                  <input type="number" name="price" id="price" step="0.01" min="0" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500" required />
                </div>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="stock" class="block text-sm font-medium text-gray-700" data-translate="Items.Form.Stock"></label>
                  <input type="number" name="stock" id="stock" step="0.01" min="0" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500" required />
                </div>
                <div>
                  <label for="targetStock" class="block text-sm font-medium text-gray-700" data-translate="Items.Form.TargetStock"></label>
                  <input type="number" name="targetStock" id="targetStock" min="0" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500" required />
                </div>
              </div>

              <div>
                <label for="category-button" class="block text-sm font-medium text-gray-700" data-translate="Items.Form.Category"></label>
                <input type="hidden" name="category" id="category" required />
                <div class="relative mt-1">
                  <button type="button" id="category-button" class="relative w-full cursor-default rounded-lg bg-white py-3 pl-4 pr-10 text-left border-gray-300 border shadow-sm focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-indigo-300">
                    <span id="category-selected-display" class="block truncate" data-translate="Items.Form.SelectCategory"></span>
                    <span class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" /></svg>
                    </span>
                  </button>
                  <ul id="category-options" class="absolute z-10 mt-1 hidden max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm"></ul>
                </div>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700" data-translate="Items.Form.Image"></label>
                <div class="mt-2 flex items-center gap-6">
                  <img id="image-preview" src="" alt="Image preview" class="h-24 w-24 rounded-full object-cover" />
                  <input type="file" name="image" id="image" accept="image/*" class="block w-full text-sm text-slate-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100" required />
                </div>
              </div>

              <div class="pt-6 flex justify-end">
                <button type="submit" id="submit-button" class="inline-flex justify-center py-3 px-6 border border-transparent shadow-sm text-md font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-300">
                  <span data-translate="Items.Button.Create"></span>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </main>

    <div id="cropper-modal" class="cropper-modal-container">
      <div class="cropper-modal-content">
        <h2 class="text-xl font-bold mb-4" data-translate="Items.Form.AdjustImage"></h2>
        <div class="cropper-image-container">
          <img id="image-to-crop" />
        </div>
        <div class="flex justify-end gap-4 mt-4">
          <button type="button" id="cancel-crop-button" class="py-2 px-4 rounded-md text-gray-700 bg-gray-100 hover:bg-gray-200" data-translate="Items.Button.Cancel"></button>
          <button type="button" id="crop-button" class="py-2 px-4 rounded-md text-white bg-indigo-600 hover:bg-indigo-700" data-translate="Items.Button.CropSave"></button>
        </div>
      </div>
    </div>

    <script src="<%= domain %>/appjs/permission.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/translate.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/libjs/cropper.min.js?<%= curentUnixTime %>"></script>
    <script>
      let cropper;
      let croppedImageBlob = null;

      // --- DOM Elements ---
      const createItemForm = document.getElementById("create-item-form");
      const categoryButton = document.getElementById("category-button");
      const categoryOptions = document.getElementById("category-options");
      const categorySelectedDisplay = document.getElementById("category-selected-display");
      const hiddenCategoryInput = document.getElementById("category");
      const imageInput = document.getElementById("image");
      const imagePreview = document.getElementById("image-preview");
      const cropperModal = document.getElementById("cropper-modal");
      const imageToCrop = document.getElementById("image-to-crop");
      const cropButton = document.getElementById("crop-button");
      const cancelCropButton = document.getElementById("cancel-crop-button");
      const submitButton = document.getElementById("submit-button");

      const packSizeInput = document.getElementById("packSize");
      const packPriceInput = document.getElementById("packPrice");
      const priceInput = document.getElementById("price");

      /**
       * Fetches active categories and populates the dropdown select.
       */
      async function populateCategories() {
        try {
          const response = await apiFetch("/api/v1/categories");
          if (!response.ok) throw new Error("Could not load categories");

          const data = await response.json();
          const allCategories = data.categories;
          let countActive = 0;

          allCategories.forEach((cat) => {
            if (!cat.enabled) return; // Skip disabled categories
            const li = document.createElement("li");
            li.className = "relative cursor-default select-none py-2 pl-10 pr-4 text-gray-900 hover:bg-indigo-100";
            li.dataset.value = cat.name;

            li.innerHTML = `
              <span class="absolute inset-y-0 left-0 flex items-center pl-2 text-gray-600">
                  ${cat.icon}
              </span>
              <span class="block truncate font-normal pl-10">
                  ${i18next.t(`Categories.${cat.name}`)}
              </span>
            `;

            li.addEventListener("click", () => {
              hiddenCategoryInput.value = li.dataset.value;
              categorySelectedDisplay.innerHTML = li.innerHTML;
              categoryOptions.classList.add("hidden");
            });

            categoryOptions.appendChild(li);
            countActive++;
          });

          if (countActive === 0) {
            const li = document.createElement("li");
            li.className = "relative cursor-default select-none py-2 pl-10 pr-4 text-gray-900";
            li.innerHTML = `<span class="block truncate font-normal pl-10">${i18next.t("Categories.None")}</span>`;
            categoryOptions.appendChild(li);
          }

          const urlParams = new URLSearchParams(window.location.search);
          const categoryFromUrl = urlParams.get("category");

          if (categoryFromUrl) {
            const categoryLi = categoryOptions.querySelector(`li[data-value="${decodeURIComponent(categoryFromUrl)}"]`);
            if (categoryLi) {
              categoryLi.click();
            }
          }
        } catch (error) {
          console.error(error);
        }

        categoryButton.addEventListener("click", () => {
          categoryOptions.classList.toggle("hidden");
        });

        window.addEventListener("click", (e) => {
          if (!categoryButton.contains(e.target)) {
            categoryOptions.classList.add("hidden");
          }
        });
      }

      function calculateItemPrice() {
        const packSize = parseFloat(packSizeInput.value);
        const packPrice = parseFloat(packPriceInput.value);

        if (packSize > 0 && packPrice > 0) {
          const itemPrice = packPrice / packSize;
          priceInput.value = (Math.ceil(itemPrice * 100) / 100).toFixed(2); // Make sure to round up to the nearest cent
        }
      }

      function handleImageSelection(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
          imageToCrop.src = e.target.result;
          cropperModal.style.display = "flex";

          if (cropper) {
            cropper.destroy();
          }

          cropper = new Cropper(imageToCrop, {
            aspectRatio: 1,
            viewMode: 1,
            background: false,
            responsive: true,
            restore: true,
          });
        };
        reader.readAsDataURL(file);
      }

      /**
       * Handles the main form submission with improved button feedback.
       */
      async function handleFormSubmit(event) {
        event.preventDefault();

        // Original state
        const originalButtonClasses = ["bg-indigo-600", "hover:bg-indigo-700"];
        const originalButtonHTML = submitButton.innerHTML;

        // Saving state
        submitButton.disabled = true;
        submitButton.innerHTML = `<span>${i18next.t("Items.Button.Saving")}</span>`;

        const formData = new FormData(createItemForm);

        if (croppedImageBlob) {
          formData.set("image", croppedImageBlob, "cropped_image.png");
        }

        try {
          const response = await apiFetch("/api/v1/items", {
            method: "POST",
            body: formData,
          });

          const response_json = await response.json();

          if (response.ok) {
            submitButton.classList.remove(...originalButtonClasses);
            submitButton.classList.add("bg-green-600");
            submitButton.innerHTML = `<span>${i18next.t("Items.Response.Success")}</span>`;

            createItemForm.reset();
            // After reset, restore the category if it was pre-filled
            const urlParams = new URLSearchParams(window.location.search);
            const categoryFromUrl = urlParams.get("category");
            if (categoryFromUrl) {
              const categoryLi = categoryOptions.querySelector(`li[data-value="${decodeURIComponent(categoryFromUrl)}"]`);
              if (categoryLi) categoryLi.click();
            } else {
              // Clear the visual selection display if no category was in the URL
              categorySelectedDisplay.innerHTML = `<span data-translate="Items.Form.SelectCategory"></span>`;
            }

            imagePreview.src = "";
            croppedImageBlob = null;
          } else {
            submitButton.classList.remove(...originalButtonClasses);
            submitButton.classList.add("bg-red-600");
            if (response.status === 409) submitButton.innerHTML = `<span>${i18next.t("Items.Response.DBUNIQUE")}</span>`;
            const input_name = response_json.reason[0].path[0];
            const input_type = response_json.reason[0].type;
            submitButton.innerHTML = '<div class="alert alert-danger">' + i18next.t(`Error.Joi.${input_type}`, { field: i18next.t(`Items.Form.${capitalizeFirstLetter(input_name)}`), limit: response_json.reason[0].context?.limit }) + "</div>";
          }
        } catch (error) {
          console.error("Submission failed:", error);
        } finally {
          setTimeout(() => {
            submitButton.disabled = false;
            submitButton.classList.remove("bg-green-600", "bg-red-600");
            submitButton.classList.add(...originalButtonClasses);
            submitButton.innerHTML = originalButtonHTML;
          }, 3000);
        }
      }

      // --- Event Listeners ---
      document.addEventListener("DOMContentLoaded", () => {
        populateCategories();
        packSizeInput.addEventListener("input", calculateItemPrice);
        packPriceInput.addEventListener("input", calculateItemPrice);
        imageInput.addEventListener("change", handleImageSelection);
        createItemForm.addEventListener("submit", handleFormSubmit);
        cropButton.addEventListener("click", () => {
          if (!cropper) return;

          const canvas = cropper.getCroppedCanvas({
            width: 512,
            height: 512,
          });

          imagePreview.src = canvas.toDataURL();

          canvas.toBlob(
            (blob) => {
              croppedImageBlob = blob;
            },
            "image/jpeg",
            0.9
          );

          cropperModal.style.display = "none";
        });

        cancelCropButton.addEventListener("click", () => {
          cropperModal.style.display = "none";
          imageInput.value = "";
        });
      });
    </script>
  </body>
</html>
