<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title id="pageTitle">Einstellungen & Statistiken</title>
    <script>
      const lang = <%- JSON.stringify(language) %>;
    </script>
    <script src="<%= domain %>/libjs/i18next.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/libjs/tailwind.js?<%= curentUnixTime %>"></script>
    <style>
      #qr-modal-overlay.active {
        visibility: visible;
        opacity: 1;
      }

      #qr-modal-overlay.active #qr-modal-content {
        transform: scale(1);
      }
    </style>
  </head>

  <body class="bg-gray-100 font-sans">
    <%- html_content.navbar %>

    <main class="container mx-auto p-4 md:p-6">
      <header class="flex items-center mb-6">
        <a href="/admin/index" aria-label="Go back" class="text-gray-500 hover:text-gray-800 mr-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
        </a>
        <h1 class="text-3xl font-bold text-gray-800" data-translate="AdminSettings.PageTitle"></h1>
      </header>

      <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
        <div class="flex items-center mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01" />
          </svg>
          <h2 class="font-bold text-xl text-gray-800" id="StatsTitle" data-translate="AdminSettings.Stats.Title"></h2>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-4 text-sm">
          <div class="space-y-3">
            <div class="flex justify-between items-center py-2 border-b">
              <span class="text-gray-600" data-translate="AdminSettings.Stats.CPUNutzung"></span>
              <span id="stat-cpu-usage" class="font-mono font-semibold text-gray-800">...</span>
            </div>
            <div class="flex justify-between items-center py-2 border-b">
              <span class="text-gray-600" data-translate="AdminSettings.Stats.DBSize"></span>
              <span id="stat-db-size" class="font-mono font-semibold text-gray-800">...</span>
            </div>
            <div class="flex justify-between items-center py-2 border-b">
              <span class="text-gray-600" data-translate="AdminSettings.Stats.Uptime"></span>
              <span id="stat-uptime" class="font-mono font-semibold text-gray-800">...</span>
            </div>
          </div>
          <div class="space-y-3">
            <div class="flex justify-between items-center py-2 border-b">
              <span class="text-gray-600" data-translate="AdminSettings.Stats.MemRss"></span>
              <span id="stat-mem-rss" class="font-mono font-semibold text-gray-800">...</span>
            </div>
            <div class="flex justify-between items-center py-2 border-b">
              <span class="text-gray-600" data-translate="AdminSettings.Stats.MemHeap"></span>
              <span id="stat-mem-heap" class="font-mono font-semibold text-gray-800">...</span>
            </div>
            <div class="flex justify-between items-center py-2 border-b">
              <span class="text-gray-600" data-translate="AdminSettings.Stats.MemHeapExternalBuffer"></span>
              <span id="stat-mem-external-buffer" class="font-mono font-semibold text-gray-800">...</span>
            </div>
          </div>
          <div class="space-y-3">
            <div class="py-2">
              <span class="text-gray-600" data-translate="AdminSettings.Stats.Storage"></span>
              <div id="stat-storage-container" class="mt-2 space-y-1"></div>
            </div>
          </div>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div class="bg-white rounded-xl shadow-lg p-6">
          <h2 class="font-bold text-xl text-gray-800 mb-2" data-translate="AdminSettings.REGCode.Title"></h2>
          <p class="text-gray-600 text-sm mb-4" data-translate="AdminSettings.REGCode.Description"></p>
          <div class="flex items-center justify-between mb-4">
            <span class="font-semibold text-gray-700" data-translate="AdminSettings.REGCode.ToggleLabel"></span>
            <label for="reg-code-toggle" class="relative inline-flex items-center cursor-pointer">
              <input type="checkbox" value="" onchange="toggleSetting('REG_CODE_ACTIVE')" id="reg-code-toggle" class="sr-only peer" />
              <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
            </label>
          </div>

          <div class="flex items-center gap-4 mb-4">
            <button id="display-qr-code-btn" onclick="displayQRCode()" class="w-full bg-blue-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-600 transition disabled:bg-gray-400 disabled:cursor-not-allowed" data-translate="AdminSettings.REGCode.Button" disabled></button>
            <button id="regenerate-reg-code-btn" onclick="regenerateRegCode()" class="w-full bg-orange-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-orange-600 transition disabled:bg-gray-400 disabled:cursor-not-allowed" data-translate="AdminSettings.REGCode.RegenerateButton" disabled></button>
          </div>
        </div>

        <div class="bg-white rounded-xl shadow-lg p-6">
          <h2 class="font-bold text-xl text-gray-800 mb-2" data-translate="AdminSettings.UserShoppinglist.Title"></h2>
          <p class="text-gray-600 text-sm mb-4" data-translate="AdminSettings.UserShoppinglist.Description"></p>
          <div class="flex items-center justify-between">
            <span class="font-semibold text-gray-700" data-translate="AdminSettings.UserShoppinglist.ToggleLabel"></span>
            <label for="user-shoppinglist-toggle" class="relative inline-flex items-center cursor-pointer">
              <input type="checkbox" value="" onchange="toggleSetting('USER_SHOPPINGLIST_ACTIVE')" id="user-shoppinglist-toggle" class="sr-only peer" />
              <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
            </label>
          </div>
        </div>

        <div class="bg-white rounded-xl shadow-lg p-6">
          <h2 class="font-bold text-xl text-gray-800 mb-2" data-translate="AdminSettings.DBAutoVaccum.Title"></h2>
          <p class="text-gray-600 text-sm mb-4" data-translate="AdminSettings.DBAutoVaccum.Description"></p>
          <div class="flex items-center justify-between mb-4">
            <span class="font-semibold text-gray-700" data-translate="AdminSettings.DBAutoVaccum.ToggleLabel"></span>
            <label for="db-autovacuum-toggle" class="relative inline-flex items-center cursor-pointer">
              <input type="checkbox" value="" onchange="toggleSetting('DB_AUTOVACUUM')" id="db-autovacuum-toggle" class="sr-only peer" />
              <div class="w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
            </label>
          </div>
          <button id="trigger-db-vacuum-btn" onclick="sendVaccumrequest()" class="w-full bg-blue-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-600 transition disabled:bg-gray-300 disabled:cursor-not-allowed" data-translate="AdminSettings.DBAutoVaccum.Button"></button>
        </div>
      </div>

      <div id="qr-modal-overlay" class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4 z-50 invisible opacity-0 transition-opacity duration-300">
        <div id="qr-modal-content" class="bg-white rounded-xl shadow-2xl p-8 max-w-sm w-full text-center relative transform scale-95 transition-transform duration-300">
          <button onclick="closeQRCodeModal()" class="absolute top-3 right-3 text-gray-500 hover:text-gray-800 text-3xl font-bold">&times;</button>

          <h2 class="text-2xl font-bold text-gray-800 mb-4" data-translate="AdminSettings.REGCode.ModalTitle"></h2>

          <div id="qr-modal-image-container" class="w-full min-h-[200px] flex items-center justify-center"></div>

          <p class="mt-4 text-gray-600" data-translate="AdminSettings.REGCode.ModalDescription"></p>
          <p id="qr-modal-code-text" class="mt-2 text-gray-800 font-mono bg-gray-100 p-2 rounded"></p>
        </div>
      </div>
    </main>

    <script src="<%= domain %>/appjs/permission.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/translate.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/libjs/qrcode.min.js?<%= curentUnixTime %>"></script>
    <script>
      let regCode = "";
      function formatBytes(bytes, decimals = 2) {
        if (!+bytes) return "0 Bytes";
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
      }

      function formatUptime(totalSeconds) {
        totalSeconds = Number(totalSeconds);
        const d = Math.floor(totalSeconds / (3600 * 24));
        const h = Math.floor((totalSeconds % (3600 * 24)) / 3600);
        const m = Math.floor((totalSeconds % 3600) / 60);
        const s = totalSeconds % 60;

        const dDisplay = d > 0 ? d + (d == 1 ? " Tag, " : " Tage, ") : "";
        const hDisplay = h > 0 ? h + (h == 1 ? " Std, " : " Std, ") : "";
        const mDisplay = m > 0 ? m + (m == 1 ? " Min, " : " Min, ") : "";
        const sDisplay = s > 0 ? s + (s == 1 ? " Sek" : " Sek") : "";

        let result = (dDisplay + hDisplay + mDisplay + sDisplay).trim();
        if (result.endsWith(",")) result = result.slice(0, -1);
        return result || "...";
      }

      async function toggleSetting(settingKey) {
        try {
          const response = await apiFetch("/api/v1/settings/toggle", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ setting_key: settingKey }),
          });
          const data = await response.json();
          if (data.success) {
            getSettings();
            updateRegCodeButtonsState();
          }
        } catch (error) {
          console.error("Error toggling setting:", error);
        }
      }

      async function getSettings() {
        try {
          const response = await apiFetch("/api/v1/settings");
          if (!response.ok) throw new Error("Network response was not ok");
          const settings = await response.json();
          document.getElementById("reg-code-toggle").checked = settings.find((s) => s.setting_key === "REG_CODE_ACTIVE")?.setting_value === "true";
          document.getElementById("user-shoppinglist-toggle").checked = settings.find((s) => s.setting_key === "USER_SHOPPINGLIST_ACTIVE")?.setting_value === "true";
          document.getElementById("db-autovacuum-toggle").checked = settings.find((s) => s.setting_key === "DB_AUTOVACUUM")?.setting_value === "true";
          regCode = settings.find((s) => s.setting_key === "REG_CODE")?.setting_value || "";
        } catch (error) {
          console.error("Error fetching settings:", error);
        }
      }

      /**
       * Fetches the registration code and displays it as a QR code.
       */
      async function displayQRCode() {
        const modalOverlay = document.getElementById("qr-modal-overlay");
        const qrImageContainer = document.getElementById("qr-modal-image-container");
        const qrCodeText = document.getElementById("qr-modal-code-text");
        const displayBtn = document.getElementById("display-qr-code-btn");

        // Provide user feedback
        modalOverlay.classList.add("active");
        qrImageContainer.innerHTML = '<p class="text-gray-500">Generating QR Code...</p>';
        qrCodeText.textContent = "";
        displayBtn.disabled = true;

        try {
          qrImageContainer.innerHTML = "";

          qrImageContainer.innerHTML = "";

          if(regCode === "DEFAULT_REG_CODE") {
            qrImageContainer.innerHTML = `<p class="text-red-500">${i18next.t("AdminSettings.REGCode.DefaultError")}</p>`;
            return;
          }

          // Generate QR Code
          const typeNumber = 4;
          const errorCorrectionLevel = "L";
          const qr = qrcode(typeNumber, errorCorrectionLevel);
          qr.addData(`<%= domain %>/register?REGCODE=${regCode}`);
          qr.make();

          qrImageContainer.innerHTML = qr.createImgTag(6, 8);
          qrCodeText.textContent = regCode;
        } catch (error) {
          console.error("Error displaying QR code:", error);
          qrImageContainer.innerHTML = `<p class="text-red-500">Error: Could not load QR code.</p>`;
        } finally {
          displayBtn.disabled = false;
        }
      }

      function closeQRCodeModal() {
        const modalOverlay = document.getElementById("qr-modal-overlay");
        modalOverlay.classList.remove("active");
        document.getElementById("qr-modal-image-container").innerHTML = "";
        document.getElementById("qr-modal-code-text").textContent = "";
      }

      async function regenerateRegCode() {
        // This function remains mostly the same
        const regenerateBtn = document.getElementById("regenerate-reg-code-btn");
        regenerateBtn.textContent = i18next.t("AdminSettings.REGCode.RegenerateButton");
        regenerateBtn.disabled = true;

        try {
          const response = await apiFetch("/api/v1/settings/regcode", {
            method: "PUT",
          });
          if (!response.ok) throw new Error("Failed to regenerate code.");

          const data = await response.json();
          regCode = data.new_reg_code;
          closeQRCodeModal()
        } catch (error) {
          regenerateBtn.textContent = i18next.t("AdminSettings.REGCode.RegenerateError");
          console.error("Error regenerating code:", error);
        } finally {
          regenerateBtn.textContent = i18next.t("AdminSettings.REGCode.RegenerateButton");
          regenerateBtn.disabled = false;
        }
      }

      async function loadSystemStats() {
        try {
          const response = await apiFetch("/api/v1/settings/stats");
          if (!response.ok) throw new Error("Network response was not ok");
          const data = await response.json();

          // Populate Stats Card
          document.getElementById("StatsTitle").textContent = i18next.t("AdminSettings.Stats.TitleVersion", { version: data.appversion || "N/A" });
          document.getElementById("stat-cpu-usage").textContent = data.systemStats ? `${data.systemStats.cpu}%` : "N/A";
          document.getElementById("stat-db-size").textContent = data.dbSize ? formatBytes(data.dbSize) : "N/A";
          document.getElementById("stat-uptime").textContent = data.systemStats ? formatUptime(data.systemStats.uptime) : "N/A";

          if (data.systemStats) {
            const mem = data.systemStats.memory;
            document.getElementById("stat-mem-rss").textContent = formatBytes(mem.rss);
            document.getElementById("stat-mem-heap").textContent = `${formatBytes(mem.heapUsed)} | ${formatBytes(mem.heapTotal)}`;
            document.getElementById("stat-mem-external-buffer").textContent = `${formatBytes(mem.external)} | ${formatBytes(mem.arrayBuffers)}`;

            const storageContainer = document.getElementById("stat-storage-container");
            storageContainer.innerHTML = ""; // Clear previous entries
            data.systemStats.storage.forEach((drive) => {
              const driveElement = document.createElement("div");
              driveElement.className = "flex justify-between items-center text-xs";
              driveElement.innerHTML = `
                    <span class="font-mono text-gray-500">${drive.dir}</span>
                    <span class="font-mono font-semibold text-gray-800">${formatBytes(drive.size)}</span>
                `;
              storageContainer.appendChild(driveElement);
            });
          }
        } catch (error) {
          console.error("Error fetching system stats:", error);
        }
      }

      function sendVaccumrequest() {
        apiFetch("/api/v1/settings/vacuumdb", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              alert(`Datenbank erfolgreich bereinigt!\nVorher: ${formatBytes(data.dbSize_before)}\nNachher: ${formatBytes(data.dbSize_after)}`);
              loadSystemStats(); // Reload stats to reflect changes
            } else {
              console.error("Failed to vacuum database:", data);
            }
          })
          .catch((error) => {
            console.error("Error sending vacuum request:", error);
          });
      }

      /**
       * Updates the disabled state of QR code buttons based on the toggle's status.
       */
      async function updateRegCodeButtonsState() {
        const regCodeToggle = document.getElementById("reg-code-toggle");
        const displayBtn = document.getElementById("display-qr-code-btn");
        const regenerateBtn = document.getElementById("regenerate-reg-code-btn");

        const isActive = regCodeToggle.checked;

        if (isActive) {
          displayBtn.disabled = false;
          regenerateBtn.disabled = false;
        } else {
          displayBtn.disabled = true;
          regenerateBtn.disabled = true;
        }
      }

      document.addEventListener("DOMContentLoaded", async () => {
        await loadSystemStats();
        await getSettings();
        await updateRegCodeButtonsState();
      });
    </script>
  </body>
</html>
