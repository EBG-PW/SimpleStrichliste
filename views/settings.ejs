<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title id="pageTitle"></title>
    <%- html_content.manifest %>
    <script>
      const lang = <%- JSON.stringify(language) %>;
    </script>
    <script src="<%= domain %>/libjs/tailwind.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/libjs/i18next.js?<%= curentUnixTime %>"></script>

    <style>
      .loader {
        border-top-color: #3498db;
        -webkit-animation: spinner 1.5s linear infinite;
        animation: spinner 1.5s linear infinite;
      }
      @-webkit-keyframes spinner {
        0% {
          -webkit-transform: rotate(0deg);
        }
        100% {
          -webkit-transform: rotate(360deg);
        }
      }
      @keyframes spinner {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    </style>
  </head>
  <body class="bg-gray-100">
    <%- html_content.navbar %>

    <main id="main-content-container" class="container mx-auto p-4">
      <div id="settings-content" class="space-y-8">
        <div class="w-full max-w-2xl mx-auto bg-white rounded-xl shadow-md overflow-hidden md:max-w-3xl light:bg-gray-800">
          <div class="p-8 md:p-12">
            <div id="loading-spinner" class="flex justify-center items-center h-64">
              <div class="loader ease-linear rounded-full border-8 border-t-8 border-gray-200 light:border-gray-700 h-32 w-32"></div>
            </div>
            <div id="profile-form-container" class="hidden">
              <h1 class="text-3xl font-bold text-gray-900 mb-2 light:text-white" data-translate="Settings.Form.Headline"></h1>
              <p class="text-gray-500 mb-8 light:text-gray-300" data-translate="Settings.Form.Description"></p>
              
              <form id="profile-form" class="space-y-6">
                <div>
                  <label for="username" class="block text-sm font-medium text-gray-700 light:text-gray-200" data-translate="Setup.Form.Username"></label>
                  <input type="text" onchange="updateProfileField(this.id, this.value)" name="username" id="username" class="mt-1 block w-full px-3 py-3 bg-gray-100 border-gray-400 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm light:bg-gray-700 light:border-gray-500 light:text-white light:placeholder-gray-400" />
                </div>
                <div>
                  <label for="name" class="block text-sm font-medium text-gray-700 light:text-gray-200" data-translate="Setup.Form.Name"></label>
                  <input type="text" onchange="updateProfileField(this.id, this.value)" name="name" id="name" class="mt-1 block w-full px-4 py-3 bg-gray-100 border-gray-400 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm light:bg-gray-700 light:border-gray-500 light:text-white light:placeholder-gray-400" />
                </div>
                <div>
                  <label for="email" class="block text-sm font-medium text-gray-700 light:text-gray-200" data-translate="Setup.Form.Email"></label>
                  <input type="email" onchange="updateProfileField(this.id, this.value)" name="email" id="email" class="mt-1 block w-full px-4 py-3 bg-gray-100 border-gray-400 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm light:bg-gray-700 light:border-gray-500 light:text-white light:placeholder-gray-400" />
                </div>
                <div>
                  <label for="language" class="block text-sm font-medium text-gray-700 light:text-gray-200" data-translate="Setup.Form.Language"></label>
                  <div class="mt-1 flex items-center space-x-4">
                    <select id="language" onchange="updateProfileField(this.id, this.value)" name="language" class="relative flex-1 cursor-default rounded-lg bg-gray-100 border-gray-400 border shadow-sm py-3 pl-4 pr-10 text-left focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-indigo-300 light:bg-gray-700 light:border-gray-500 light:text-white">
                      <% for(const code in countryConfig) { %>
                      <option value="<%= code %>"><%= countryConfig[code] %></option>
                      <% } %>
                    </select>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>

        <div class="w-full max-w-2xl mx-auto bg-white rounded-xl shadow-md overflow-hidden md:max-w-3xl">
          <div class="p-8 md:p-12">
            <h2 class="text-2xl font-bold text-gray-900 mb-2" data-translate="Settings.Form.PasswordHeadline"></h2>
            <p class="text-gray-500 mb-8" data-translate="Settings.Form.PasswordDescription"></p>
            <form id="password-form" class="space-y-6">
              <div>
                <label for="current-password" class="block text-sm font-medium text-gray-700" data-translate="Settings.Form.CurrentPassword"></label>
                <input type="password" name="current-password" id="current-password" class="mt-1 block w-full px-4 py-3 bg-gray-100 border-gray-400 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required />
              </div>
              <div>
                <label for="new-password" class="block text-sm font-medium text-gray-700" data-translate="Settings.Form.NewPassword"></label>
                <input type="password" name="new-password" id="new-password" class="mt-1 block w-full px-4 py-3 bg-gray-100 border-gray-400 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required />
              </div>
              <div>
                <label for="confirm-password" class="block text-sm font-medium text-gray-700" data-translate="Settings.Form.ConfirmPassword"></label>
                <input type="password" name="confirm-password" id="confirm-password" class="mt-1 block w-full px-4 py-3 bg-gray-100 border-gray-400 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" required />
              </div>
              <div class="flex justify-end">
                <button id="change-password-button" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" data-translate="Settings.Button.Password"></button>
              </div>
            </form>
          </div>
        </div>

        <div class="w-full max-w-2xl mx-auto bg-white rounded-xl shadow-md overflow-hidden md:max-w-3xl">
          <div class="p-8 md:p-12">
            <h2 class="text-2xl font-bold text-gray-900 mb-2" data-translate="Settings.Sessions.Headline"></h2>
            <p class="text-gray-500 mb-8" data-translate="Settings.Sessions.Description"></p>
            <div class="flex justify-end mb-6">
              <button id="terminate-all-sessions-button" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500" data-translate="Settings.Button.TerminateAllSessions"></button>
            </div>
            <div id="session-list-container" class="space-y-4"></div>
          </div>
        </div>
      </div>
      <div id="message-box-container" class="fixed bottom-5 right-5 w-full max-w-xs">
        <div id="message-box" class="hidden mt-4 p-4 rounded-lg shadow-lg"></div>
      </div>
    </main>

    <script src="<%= domain %>/appjs/permission.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/translate.js?<%= curentUnixTime %>"></script>
    <script>
      // --- DOM Elements ---
      const profileForm = document.getElementById("profile-form");
      const usernameInput = document.getElementById("username");
      const nameInput = document.getElementById("name");
      const emailInput = document.getElementById("email");
      const passwordInput = document.getElementById("password");
      const passwordForm = document.getElementById("password-form");
      const currentPasswordInput = document.getElementById("current-password");
      const newPasswordInput = document.getElementById("new-password");
      const confirmPasswordInput = document.getElementById("confirm-password");
      const languageSelect = document.getElementById("language");
      const saveButton = document.getElementById("save-button");
      const messageBox = document.getElementById("message-box");
      const loadingSpinner = document.getElementById("loading-spinner");
      const formContainer = document.getElementById("profile-form-container");
      const sessionListContainer = document.getElementById("session-list-container");
      const terminateAllButton = document.getElementById("terminate-all-sessions-button");

      /**
       * Shows a message to the user.
       * @param {string} text - The message to display.
       * @param {('success'|'error')} type - The type of message.
       */
      function showMessage(text, type = "success") {
        messageBox.textContent = text;
        messageBox.className = `mt-4 p-4 rounded-lg ${type === "success" ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`;
        messageBox.classList.remove("hidden");
        setTimeout(() => {
          messageBox.classList.add("hidden");
        }, 4000);
      }

      /**
       * Fetches user data and populates the form fields.
       */
      async function loadUserData() {
        loadingSpinner.classList.remove("hidden");
        formContainer.classList.add("hidden");
        try {
          const response = await fetch("/api/v1/users", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          });
          if (!response.ok) {
            throw new Error("Failed to fetch user data.");
          }
          const user = await response.json();

          usernameInput.value = user.username;
          nameInput.value = user.name;
          emailInput.value = user.email;
          languageSelect.value = user.language;

          loadingSpinner.classList.add("hidden");
          formContainer.classList.remove("hidden");
        } catch (error) {
          console.error("Error loading user data:", error);
          loadingSpinner.innerHTML = `<p class="text-red-500">${i18next.t("Settings.ErrorLoadingUserData")}</p>`;
        }
      }
      /**
       * Updates a user profile field.
       * @param {string} field - The field to update (username, name, email, language).
       * @param {string} value - The new value for the field.
       */
      async function updateProfileField(field, value) {
        const inputField = document.getElementById(field);
        if (!inputField) return;

        try {
          const response = await fetch(`/api/v1/users/${field}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
            body: JSON.stringify({ [field]: value }),
          });

          const response_json = await response.json();
          if (response.ok) {
            showMessage(i18next.t("Settings.SettingsUpdatedSuccsess", { Setting: i18next.t(`Setup.Form.${field.charAt(0).toUpperCase() + field.slice(1)}`) }));
            inputField.classList.add("ring-2", "ring-green-500");

            setTimeout(() => {
              inputField.classList.remove("ring-2", "ring-green-500");
            }, 5000);
          } else {
            if (typeof response_json.reason === "string") {
              showMessage(i18next.t(`Error.${response_json.message}`));
              return;
            }
            const input_name = response_json.reason[0].path[0];
            const input_type = response_json.reason[0].type;
            document.getElementById(field).classList.remove("is-invalid");

            showMessage(i18next.t(`Error.Joi.${input_type}`, { field: i18next.t(`Setup.Form.${capitalizeFirstLetter(input_name)}`), limit: response_json.reason[0].context?.limit }), "error");
            document.getElementById(field).classList.add("is-invalid");

            inputField.classList.add("ring-2", "ring-red-500");
            setTimeout(() => {
              inputField.classList.remove("ring-2", "ring-red-500");
            }, 5000);
          }
        } catch (error) {
          console.error(`Error updating ${field}:`, error);
        }
      }

      /**
       * Handles the password change form submission.
       */
      async function changePassword(event) {
        event.preventDefault();

        // Clear previous error states
        newPasswordInput.classList.remove("ring-2", "ring-red-500");
        confirmPasswordInput.classList.remove("ring-2", "ring-red-500");
        currentPasswordInput.classList.remove("ring-2", "ring-red-500");

        const currentPassword = currentPasswordInput.value;
        const newPassword = newPasswordInput.value;
        const confirmPassword = confirmPasswordInput.value;

        if (newPassword !== confirmPassword) {
          showMessage(i18next.t("Settings.PasswordsDoNotMatch"), "error");
          newPasswordInput.classList.add("ring-2", "ring-red-500");
          confirmPasswordInput.classList.add("ring-2", "ring-red-500");
          return;
        }

        try {
          const response = await apiFetch("/api/v1/users/password", {
            method: "PUT",
            body: JSON.stringify({ currentPassword, newPassword }),
          });

          if (response.ok) {
            showMessage(i18next.t("Settings.PasswordUpdatedSuccessfully"));
            passwordForm.reset();
          } else {
            const errorData = await response.json();
            showMessage(i18next.t(`Error.${errorData.message}` || "Failed to change password"), "error");
            // Highlight the field that was likely incorrect
            if (errorData.field === "currentPassword") {
              currentPasswordInput.classList.add("ring-2", "ring-red-500");
            }
          }
        } catch (error) {
          console.error("Error changing password:", error);
          showMessage("An unexpected error occurred. Please try again.", "error");
        }
      }

      /**
       * Fetches and displays the user's active sessions.
       */
      async function loadSessions() {
        const sessionListContainer = document.getElementById("session-list-container");
        if (!sessionListContainer) {
          console.error("Error: Container 'session-list-container' not found.");
          return;
        }

        sessionListContainer.innerHTML = "";
        const table = document.createElement("table");
        table.className = "min-w-full divide-y divide-gray-200 border rounded-lg";

        const thead = document.createElement("thead");
        thead.className = "bg-gray-50";
        thead.innerHTML = `
        <tr>
          <th scope="col" class="p-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">${t("Settings.Sessions.TableBrowser")}
          </th>
          <th scope="col" class="p-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">${t("Settings.Sessions.TableTime")}
          </th>
          <th scope="col" class="p-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">${t("Settings.Sessions.TableStatus")}
          </th>
          <th scope="col" class="relative p-4">
          </th>
        </tr>
      `;

        const tableBody = document.createElement("tbody");
        tableBody.id = "Settings.Sessions.TableData";
        tableBody.className = "bg-white divide-y divide-gray-200";

        table.appendChild(thead);
        table.appendChild(tableBody);
        sessionListContainer.appendChild(table);

        try {
          const response = await fetch("/api/v1/users/sessions", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          });

          if (!response.ok) {
            throw new Error("Failed to fetch sessions.");
          }

          const sessions = await response.json();

          // Disable "Terminate All" button if there's only one session
          const terminateAllButton = document.getElementById("terminate-all-sessions-button");
          if (terminateAllButton && sessions.length <= 1) {
            terminateAllButton.disabled = true;
            terminateAllButton.classList.add("opacity-50", "cursor-not-allowed");
          }

          sessions.forEach((session) => {
            const row = document.createElement("tr");

            const browserCell = document.createElement("td");
            browserCell.className = "p-4 whitespace-nowrap text-sm font-medium text-gray-900";
            browserCell.innerText = session.browser || "Unknown Browser";
            row.appendChild(browserCell);

            const timeCell = document.createElement("td");
            timeCell.className = "p-4 whitespace-nowrap text-sm text-gray-500";
            timeCell.innerText = new Date(session.time).toLocaleString(t("Page.LangKey"));
            row.appendChild(timeCell);

            const statusCell = document.createElement("td");
            statusCell.className = "p-4 whitespace-nowrap text-sm";
            if (session.current_session) {
              statusCell.innerHTML = `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">${t("Settings.Sessions.CurrentSession")}</span>`;
            }
            row.appendChild(statusCell);

            const actionCell = document.createElement("td");
            actionCell.className = "p-4 whitespace-nowrap text-right text-sm font-medium";

            const deleteButton = document.createElement("button");
            deleteButton.className = "terminate-session-button text-red-600 hover:text-red-800 focus:outline-none";
            deleteButton.setAttribute("data-session-id", session.token);
            deleteButton.setAttribute("data-translate", "Settings.Button.Terminate");
            deleteButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 7l16 0" /><path d="M10 11l0 6" /><path d="M14 11l0 6" /><path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" /><path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" /></svg>`;
            deleteButton.title = "Terminate session";

            actionCell.appendChild(deleteButton);
            row.appendChild(actionCell);

            tableBody.appendChild(row);
          });

          document.querySelectorAll(".terminate-session-button").forEach((button) => {
            button.addEventListener("click", (event) => {
              const sessionId = event.currentTarget.getAttribute("data-session-id");
              if (sessionId) {
                terminateSession(sessionId);
              }
            });
          });
        } catch (error) {
          console.error("Error loading sessions:", error);
          tableBody.innerHTML = `
          <tr>
            <td colspan="4" class="p-4 text-center text-red-500">
              ${i18next.t("Settings.ErrorLoadingSessions")}
            </td>
          </tr>`;
        }
      }

      /**
       * Terminates a specific user session.
       * @param {string} sessionId - The ID of the session to terminate.
       */
      async function terminateSession(sessionId) {
        try {
          const response = await fetch(`/api/v1/users/sessions/${sessionId}`, {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          });
          if (response.ok) {
            showMessage(i18next.t("Settings.SessionTerminatedSuccess"));
            if(sessionId === localStorage.getItem("token")) {
              // If the current session was terminated, log out the user
              window.location.href = "/login";
              return;
            }
            loadSessions();
          } else {
            const errorData = await response.json();
            showMessage(i18next.t(`Error.${errorData.message}` || "Settings.ErrorTerminatingSession"), "error");
          }
        } catch (error) {
          console.error("Error terminating session:", error);
          showMessage(i18next.t("Settings.ErrorTerminatingSession"), "error");
        }
      }

      /**
       * Terminates all user sessions except the current one.
       */
      async function terminateAllOtherSessions() {
        try {
          const response = await fetch("/api/v1/users/allothersessions", {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          });

          if (response.ok) {
            showMessage(i18next.t("Settings.AllSessionsTerminatedSuccess"));
            loadSessions();
          } else {
            const errorData = await response.json();
            showMessage(i18next.t(`Error.${errorData.message}` || "Settings.ErrorTerminatingAllSessions"), "error");
          }
        } catch (error) {
          console.error("Error terminating all other sessions:", error);
          showMessage(i18next.t("Settings.ErrorTerminatingAllSessions"), "error");
        }
      }

      // --- Initial Load ---
      document.addEventListener("DOMContentLoaded", () => {
        loadUserData();
        loadSessions();
        passwordForm.addEventListener("submit", changePassword);
        terminateAllButton.addEventListener("click", terminateAllOtherSessions);
      });
    </script>
  </body>
</html>
