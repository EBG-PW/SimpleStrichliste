<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title id="pageTitle">Account Settings</title>

    <script>
      const lang = <%- JSON.stringify(language) %>;
    </script>
    <script src="<%= domain %>/libjs/i18next.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/libjs/tailwind.js?<%= curentUnixTime %>"></script>

    <style>
      .loader {
        border-top-color: #3498db;
        -webkit-animation: spinner 1.5s linear infinite;
        animation: spinner 1.5s linear infinite;
      }
      @-webkit-keyframes spinner {
        0% {
          -webkit-transform: rotate(0deg);
        }
        100% {
          -webkit-transform: rotate(360deg);
        }
      }
      @keyframes spinner {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    </style>
  </head>
  <body class="bg-gray-100">
    <!-- Navbar placeholder restored -->
    <%- html_content.navbar %>

    <main id="main-content-container" class="container mx-auto p-4">
      <!-- Settings Content -->
      <div id="settings-content">
        <div class="w-full max-w-2xl mx-auto bg-white rounded-xl shadow-md overflow-hidden md:max-w-3xl">
          <div class="p-8 md:p-12">
            <div id="loading-spinner" class="flex justify-center items-center h-64">
              <div class="loader ease-linear rounded-full border-8 border-t-8 border-gray-200 h-32 w-32"></div>
            </div>
            <div id="profile-form-container" class="hidden">
              <h1 class="text-3xl font-bold text-gray-900 mb-2">Account Settings</h1>
              <p class="text-gray-500 mb-8">Edit your profile and application settings.</p>
              <form id="profile-form" class="space-y-6">
                <!-- Username -->
                <div>
                  <label for="username" class="block text-sm font-medium text-gray-700">Username</label>
                  <input type="text" name="username" id="username" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="your_username" />
                </div>
                <!-- Name -->
                <div>
                  <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
                  <input type="text" name="name" id="name" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Your Name" />
                </div>
                <!-- Email -->
                <div>
                  <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                  <input type="email" name="email" id="email" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="you@example.com" />
                </div>
                <!-- New Password -->
                <div>
                  <label for="password" class="block text-sm font-medium text-gray-700">New Password</label>
                  <input type="password" name="password" id="password" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Leave blank to keep current password" />
                </div>
                <!-- Confirm Password -->
                <div>
                  <label for="confirm-password" class="block text-sm font-medium text-gray-700">Confirm New Password</label>
                  <input type="password" name="confirm-password" id="confirm-password" class="mt-1 block w-full px-4 py-3 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Confirm your new password" />
                </div>
                <!-- Language -->
                <div>
                  <label for="language" class="block text-sm font-medium text-gray-700">Language</label>
                  <select id="language" name="language" class="mt-1 block w-full px-4 py-3 border-gray-300 bg-white rounded-lg shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    <option value="en">English</option>
                    <option value="es">Spanish</option>
                    <option value="fr">French</option>
                    <option value="de">German</option>
                    <option value="jp">Japanese</option>
                  </select>
                </div>
                <!-- Action Buttons -->
                <div class="pt-6 flex justify-end space-x-4">
                  <button type="button" id="cancel-button" class="px-6 py-3 bg-gray-100 text-gray-700 rounded-lg font-semibold text-sm hover:bg-gray-200">Cancel</button>
                  <button type="submit" id="save-button" class="px-6 py-3 bg-indigo-600 text-white rounded-lg font-semibold text-sm hover:bg-indigo-700">Save Changes</button>
                </div>
              </form>
            </div>
            <div id="message-box" class="hidden mt-4 p-4 rounded-lg"></div>
          </div>
        </div>
      </div>
    </main>

    <!-- Script links restored -->
    <script src="<%= domain %>/appjs/permission.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/translate.js?<%= curentUnixTime %>"></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // --- DOM Elements ---
        const profileForm = document.getElementById("profile-form");
        const usernameInput = document.getElementById("username");
        const nameInput = document.getElementById("name");
        const emailInput = document.getElementById("email");
        const passwordInput = document.getElementById("password");
        const confirmPasswordInput = document.getElementById("confirm-password");
        const languageSelect = document.getElementById("language");
        const saveButton = document.getElementById("save-button");
        const cancelButton = document.getElementById("cancel-button");
        const messageBox = document.getElementById("message-box");
        const loadingSpinner = document.getElementById("loading-spinner");
        const formContainer = document.getElementById("profile-form-container");

        let initialUserData = {};

        /**
         * Shows a message to the user.
         * @param {string} text - The message to display.
         * @param {('success'|'error')} type - The type of message.
         */
        function showMessage(text, type = "success") {
          messageBox.textContent = text;
          messageBox.className = `mt-4 p-4 rounded-lg ${type === "success" ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`;
          messageBox.classList.remove("hidden");
          setTimeout(() => {
            messageBox.classList.add("hidden");
          }, 5000);
        }

        /**
         * Fetches user data and populates the form fields.
         */
        async function loadUserData() {
          loadingSpinner.classList.remove("hidden");
          formContainer.classList.add("hidden");
          try {
            const response = await fetch("/api/v1/users", {
              method: "GET",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${localStorage.getItem("token")}`,
              },
            });
            if (!response.ok) {
              throw new Error("Failed to fetch user data.");
            }
            const user = await response.json();
            initialUserData = { ...user };

            usernameInput.value = user.username;
            nameInput.value = user.name;
            emailInput.value = user.email;
            languageSelect.value = user.language;

            loadingSpinner.classList.add("hidden");
            formContainer.classList.remove("hidden");
          } catch (error) {
            console.error("Error loading user data:", error);
            loadingSpinner.innerHTML = `<p class="text-red-500">Could not load user data. Please try again later.</p>`;
          }
        }

        /**
         * Handles the form submission to update user data.
         */
        async function handleFormSubmit(event) {
          event.preventDefault();
          saveButton.disabled = true;
          saveButton.textContent = "Saving...";

          const password = passwordInput.value;
          const confirmPassword = confirmPasswordInput.value;

          if (password && password !== confirmPassword) {
            showMessage("Passwords do not match.", "error");
            passwordInput.focus();
            saveButton.disabled = false;
            saveButton.textContent = "Save Changes";
            return;
          }

          const updatedData = {};
          if (usernameInput.value !== initialUserData.username) updatedData.username = usernameInput.value;
          if (nameInput.value !== initialUserData.name) updatedData.name = nameInput.value;
          if (emailInput.value !== initialUserData.email) updatedData.email = emailInput.value;
          if (languageSelect.value !== initialUserData.language) updatedData.language = languageSelect.value;
          if (password) updatedData.password = password;

          if (Object.keys(updatedData).length === 0) {
            showMessage("No changes to save.", "success");
            saveButton.disabled = false;
            saveButton.textContent = "Save Changes";
            return;
          }

          try {
            const response = await fetch("/api/v1/user", {
              method: "PATCH",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${localStorage.getItem("token")}`,
              },
              body: JSON.stringify(updatedData),
            });

            if (!response.ok) {
              const errorData = await response.json().catch(() => ({}));
              throw new Error(errorData.message || "Failed to update profile.");
            }

            const result = await response.json();
            showMessage(result.message || "Profile updated successfully!", "success");

            passwordInput.value = "";
            confirmPasswordInput.value = "";

            // Refresh initial data state with the new data
            initialUserData = { ...initialUserData, ...updatedData };
            delete initialUserData.password; // Don't store password in state
          } catch (error) {
            console.error("Error updating profile:", error);
            showMessage(error.message, "error");
          } finally {
            saveButton.disabled = false;
            saveButton.textContent = "Save Changes";
          }
        }

        /**
         * Resets the form to its initial state.
         */
        function handleCancel() {
          usernameInput.value = initialUserData.username || "";
          nameInput.value = initialUserData.name || "";
          emailInput.value = initialUserData.email || "";
          languageSelect.value = initialUserData.language || "en";
          passwordInput.value = "";
          confirmPasswordInput.value = "";
          messageBox.classList.add("hidden");
        }

        // --- Event Listeners ---
        profileForm.addEventListener("submit", handleFormSubmit);
        cancelButton.addEventListener("click", handleCancel);

        // --- Initial Load ---
        loadUserData();
      });
    </script>
  </body>
</html>
