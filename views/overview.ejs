<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title id="pageTitle"></title>
    <script>
      const lang = <%- JSON.stringify(language) %>;
    </script>
    <script src="<%= domain %>/libjs/i18next.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/libjs/tailwind.js?<%= curentUnixTime %>"></script>
    <style>
      /* Add padding to the bottom to prevent overlap with the fixed nav bar */
      body {
        padding-bottom: 80px; /* Adjust this value based on the height of your nav bar */
      }
    </style>
  </head>

  <body class="bg-gray-100">
    <%- html_content.navbar %>

    <main id="main-content-container" class="container mx-auto p-4">
      <div id="overview-content">
        <div class="bg-white rounded-xl shadow-lg p-6 mb-6">
          <h2 class="text-sm font-medium text-gray-500">Aktueller Saldo</h2>
          <p id="balance-display" class="text-4xl font-bold text-gray-800 mt-1">...</p>
        </div>
        <div id="items-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"></div>
      </div>
    </main>

    <script src="<%= domain %>/appjs/permission.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/translate.js?<%= curentUnixTime %>"></script>
    <script>
      // --- NEW: Class for managing the bottom navigation bar and views ---
      class BottomNavBar {
        constructor(mainContainerId, onChangeCallback) {
          this.mainContainer = document.getElementById(mainContainerId);
          this.onChange = onChangeCallback; // Callback to run when selection changes
          this.categories = [];
          this.activeCategoryKey = null;

          // Create the nav bar element
          this.navElement = document.createElement("nav");
          this.navElement.className = "fixed bottom-0 left-0 w-full bg-white shadow-[0_-2px_5px_rgba(0,0,0,0.1)] flex justify-around items-center h-[70px] z-50";
          document.body.appendChild(this.navElement);

          this._attachEventListeners();
        }

        addCategory(name, key, icon, contentElement) {
          const isFirstCategory = this.categories.length === 0;
          this.categories.push({ name, key, icon, contentElement });

          // Hide the content element by default unless it's the first one
          if (!isFirstCategory) {
            contentElement.classList.add("hidden");
          } else {
            this.activeCategoryKey = key; // Set the first category as active
          }

          this._renderButton(name, key, icon, isFirstCategory);
        }

        selectCategory(key) {
          if (this.activeCategoryKey === key) return; // Do nothing if already active

          this.activeCategoryKey = key;

          // Update button styles
          this.navElement.querySelectorAll("button").forEach((btn) => {
            const isActive = btn.dataset.categoryKey === key;
            btn.classList.toggle("text-gray-900", isActive); // Active color: black
            btn.classList.toggle("text-gray-400", !isActive); // Inactive color: gray
          });

          // Show/hide content views
          this.categories.forEach((cat) => {
            const isActive = cat.key === key;
            cat.contentElement.classList.toggle("hidden", !isActive);
          });

          // Fire the callback so the main script can react
          if (this.onChange) {
            this.onChange(this.activeCategoryKey);
          }
        }

        _renderButton(name, key, icon, isActive) {
          const button = document.createElement("button");
          button.className = "flex flex-col items-center justify-center flex-1 h-full";
          button.classList.add(isActive ? "text-gray-900" : "text-gray-400");
          button.dataset.categoryKey = key;

          button.innerHTML = `
              ${icon}
              <span class="text-xs mt-1">${name}</span>
            `;
          this.navElement.appendChild(button);
        }

        _attachEventListeners() {
          this.navElement.addEventListener("click", (e) => {
            const clickedButton = e.target.closest("button");
            if (clickedButton) {
              this.selectCategory(clickedButton.dataset.categoryKey);
            }
          });
        }
      }

      document.addEventListener("DOMContentLoaded", () => {
        const balanceDisplay = document.getElementById("balance-display");
        const itemsGrid = document.getElementById("items-grid");

        const handleCategoryChange = (selectedKey) => {
          console.log("Selected category key:", selectedKey);
          // Call your data loading function based on the selected key
          loadData(selectedKey);
        };

        const navBar = new BottomNavBar("main-content-container", handleCategoryChange);

        // Always add overview page
        const overviewContent = document.getElementById("overview-content");
        const overviewIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16" /></svg>`;
        navBar.addCategory("Übersicht", "overview", overviewIcon, overviewContent);

        // This function can now be simpler, just focusing on fetching and rendering data
        const loadData = async (category = "all") => {
          // For the overview, we fetch everything
          if (category === "overview") {
            itemsGrid.innerHTML = '<p class="col-span-full text-center">Lade Artikel...</p>';
            try {
              const response = await fetch(`/api/v1/store/overview`, {
                method: "GET",
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${localStorage.getItem("token")}`,
                },
              });
              const response_data = await response.json();

              // Display Balance
              balanceDisplay.textContent = response_data.balance.toFixed(2).replace(".", ",") + " €";

              // Display Favorites (Rename itemsGrid to FavoritesGrid)
              itemsGrid.innerHTML = "";
              response_data.favorites.forEach((item) => {
                const itemCardHTML = `
                    <div class="bg-white rounded-xl shadow-lg p-4 flex flex-col items-center text-center">
                      <img src="${item.image}" alt="${item.name}" class="w-24 h-24 object-cover rounded-full mb-4">
                      <h3 class="font-bold text-lg text-gray-800">${item.name}</h3>
                      <p class="text-green-600 font-semibold text-md">${item.price.toFixed(2).replace(".", ",")} €</p>
                      <p class="text-xs text-gray-400 mt-2">Lager: ${item.stock}</p>
                    </div>`;
                itemsGrid.innerHTML += itemCardHTML;
              });

              response_data.categories.forEach((item) => {
                const ElementIcon = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h4a2 2 0 012 2v2m-6 0h6" /></svg>`;
                const ElementContent = document.createElement("div");
                ElementContent.id = "content-drinks";
                ElementContent.innerHTML = `<h1 class="text-2xl font-bold mb-4">${item}</h1>
                                  <ul class="list-disc pl-5 bg-white p-4 rounded-xl shadow-lg" id=""></ul>`;
                document.getElementById("main-content-container").appendChild(ElementContent);
                navBar.addCategory(item.name, item.name, ElementIcon, ElementContent);
              });
            } catch (error) {
              itemsGrid.innerHTML = '<p class="text-red-500 col-span-full text-center">Fehler beim Laden.</p>';
            }
          } else {
            console.log(`Fetching API data for category: ${category}`);
          }
        };

        // --- Perform initial data load for the default view ---
        loadData("overview");
      });
    </script>
  </body>
</html>
