<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title id="pageTitle"></title>
    <%- html_content.manifest %>
    <script>
      const lang = <%- JSON.stringify(language) %>;
    </script>
    <script src="<%= domain %>/libjs/i18next.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/libjs/tailwind.js?<%= curentUnixTime %>"></script>
    <style>
      body {
        padding-bottom: 80px;
      }

      .category-item-list {
        max-height: 60vh;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: #a0aec0 #edf2f7;
      }

      #popup-wrapper {
        transition: visibility 0s, opacity 0.3s ease-in-out;
      }
      #popup-wrapper.active {
        transition: visibility 0s, opacity 0.3s ease-in-out;
      }
      #buy-popup {
        transition: transform 0.3s ease-in-out;
      }
      #restocking-popup-wrapper {
        transition: visibility 0s, opacity 0.3s ease-in-out;
      }
    </style>
  </head>

  <body class="bg-gray-100">
    <%- html_content.navbar %>

    <main id="main-content-container" class="container mx-auto p-4">
      <div id="overview-content" class="category-content">
        <div class="bg-white rounded-xl shadow-lg p-6 mb-6 flex items-center justify-between">
          <div>
            <h2 class="text-sm font-medium text-gray-500" data-translate="Overview.Current_Balance"></h2>
            <p id="balance-display" class="text-4xl font-bold text-gray-800 mt-1">...</p>
          </div>
          <button id="open-restock-popup-btn" class="hidden flex-shrink-0 flex items-center gap-2 bg-orange-500 text-white font-semibold py-2 px-3 rounded-lg hover:bg-orange-600 transition-colors shadow text-sm" data-translate="Overview.RestockItemsOpen">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M4 4v5h5M5.293 9.293a8 8 0 11-1.093-3.235" />
              <path stroke-linecap="round" stroke-linejoin="round" d="M9 12H4.5M9 12V7.5M9 12l-4.5-4.5" />
            </svg>
          </button>
        </div>
        <h2 class="text-xl font-bold mb-4 text-gray-700" data-translate="Overview.Favorites"></h2>
        <div id="items-grid" class="category-item-list flex flex-col gap-4"></div>
      </div>
    </main>

    <div id="popup-wrapper" class="fixed inset-0 z-50 invisible opacity-0">
      <div id="popup-backdrop" class="absolute inset-0 bg-black bg-opacity-50"></div>
      <div id="buy-popup" class="absolute bottom-0 left-0 right-0 bg-white rounded-t-2xl shadow-2xl p-6 z-10 transform translate-y-full">
        <div class="relative">
          <img id="popup-item-image" src="" alt="Item image" class="w-24 h-24 object-cover rounded-full mb-4 absolute -top-16 left-1/2 -translate-x-1/2 border-4 border-white shadow-lg" />
        </div>
        <div class="mt-10 text-center">
          <h3 id="popup-item-name" class="text-2xl font-bold text-gray-800"></h3>
          <p id="popup-item-price-single" class="text-lg text-gray-500 mt-1"></p>
          <p id="popup-stock-info" class="text-sm text-gray-600 mt-2 font-medium"></p>
        </div>

        <div class="flex items-center justify-center my-6">
          <button id="quantity-minus" class="px-4 py-2 bg-gray-200 text-gray-800 font-bold rounded-l-lg hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed">-</button>
          <span id="quantity-display" class="px-6 py-2 bg-gray-100 text-xl font-mono">1</span>
          <button id="quantity-plus" class="px-4 py-2 bg-gray-200 text-gray-800 font-bold rounded-r-lg hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed">+</button>
        </div>

        <button id="popup-buy-confirm" class="w-full bg-blue-600 text-white font-bold py-4 rounded-xl text-lg hover:bg-blue-700 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"></button>
      </div>
    </div>

    <div id="message-box-container" class="fixed bottom-5 right-5 w-full max-w-xs z-[9999]">
      <div id="message-box" class="hidden mt-4 p-4 rounded-lg shadow-lg"></div>
    </div>
    
    <div id="restocking-popup-wrapper" class="fixed inset-0 z-60 invisible opacity-0 flex items-center justify-center p-4">
        <div id="restocking-popup-backdrop" class="absolute inset-0 bg-black bg-opacity-60"></div>
        <div id="restocking-popup" class="relative bg-white rounded-2xl shadow-2xl w-full max-w-md max-h-[85vh] flex flex-col">
            <div class="p-4 border-b flex justify-between items-center">
                <div>
                    <h2 class="text-xl font-bold text-gray-800" data-translate="Overview.RestockItems.Title"></h2>
                    <p class="text-sm text-gray-500" data-translate="Overview.RestockItems.Description"></p>
                </div>
                <button id="restock-close-button" class="text-gray-400 hover:text-gray-600">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                </button>
            </div>
            <div id="restocking-items-list" class="flex-grow p-2 overflow-y-auto">
            </div>
            <div class="p-4 border-t">
                <div id="restock-total-container" class="text-right mb-2 text-lg font-medium text-gray-700"></div>
                <button id="restock-confirm-button" class="w-full bg-blue-600 text-white font-bold py-3 rounded-xl text-lg hover:bg-blue-700 transition-colors disabled:bg-gray-400" data-translate="Overview.RestockItems.CompleteButton"></button>
            </div>
        </div>
    </div>

    <script src="<%= domain %>/appjs/permission.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/translate.js?<%= curentUnixTime %>"></script>
    <script>
      // ---- Bottom Navigation Bar Class ----
      class BottomNavBar {
        constructor(mainContainerId, onChangeCallback) {
          this.mainContainer = document.getElementById(mainContainerId);
          this.onChange = onChangeCallback;
          this.categories = [];
          this.activeCategoryKey = null;

          this.navElement = document.createElement("nav");
          this.navElement.className = "fixed bottom-0 left-0 w-full bg-white shadow-[0_-2px_5px_rgba(0,0,0,0.1)] flex justify-around items-center h-[70px] z-40";
          document.body.appendChild(this.navElement);

          this._attachEventListeners();
        }
        addCategory(name, key, icon, contentElement) {
          const isFirstCategory = this.categories.length === 0;
          this.categories.push({ name, key, icon, contentElement });
          if (!isFirstCategory) {
            contentElement.classList.add("hidden");
          } else {
            this.activeCategoryKey = key;
          }
          this._renderButton(name, key, icon, isFirstCategory);
        }
        selectCategory(key) {
          if (this.activeCategoryKey === key) return;
          this.activeCategoryKey = key;
          this.navElement.querySelectorAll("button").forEach((btn) => {
            const isActive = btn.dataset.categoryKey === key;
            btn.classList.toggle("text-gray-900", isActive);
            btn.classList.toggle("text-gray-400", !isActive);
          });
          this.categories.forEach((cat) => {
            const isActive = cat.key === key;
            cat.contentElement.classList.toggle("hidden", !isActive);
          });
          if (this.onChange) {
            this.onChange(this.activeCategoryKey, true);
          }
        }
        clearCategories(keysToKeep = []) {
          const categoriesToRemove = this.categories.filter((cat) => !keysToKeep.includes(cat.key));
          categoriesToRemove.forEach((cat) => {
            const button = this.navElement.querySelector(`button[data-category-key="${cat.key}"]`);
            if (button) button.remove();
            if (cat.contentElement) cat.contentElement.remove();
          });
          this.categories = this.categories.filter((cat) => keysToKeep.includes(cat.key));
          if (!keysToKeep.includes(this.activeCategoryKey)) {
            if (this.categories.length > 0) {
              this.selectCategory(this.categories[0].key);
            } else {
              this.activeCategoryKey = null;
            }
          }
        }
        _renderButton(name, key, icon, isActive) {
          const button = document.createElement("button");
          button.className = "flex flex-col items-center justify-center flex-1 h-full";
          button.classList.add(isActive ? "text-gray-900" : "text-gray-400");
          button.dataset.categoryKey = key;
          button.innerHTML = `
                      ${icon}
                      <span class="text-xs mt-1">${t(`Categories.${name}`)}</span>
                    `;
          this.navElement.appendChild(button);
        }
        _attachEventListeners() {
          this.navElement.addEventListener("click", (e) => {
            const clickedButton = e.target.closest("button");
            if (clickedButton) {
              this.selectCategory(clickedButton.dataset.categoryKey);
            }
          });
        }
      }

      const messageBox = document.getElementById("message-box");
      function showMessage(text, type = "success") {
        messageBox.textContent = text;
        messageBox.className = `mt-4 p-4 rounded-lg ${type === "success" ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`;
        messageBox.classList.remove("hidden");
        setTimeout(() => {
          messageBox.classList.add("hidden");
        }, 4000);
      }

      document.addEventListener("DOMContentLoaded", () => {
        const mainContainer = document.getElementById("main-content-container");
        const ITEMS_PER_PAGE = 10;
        let itemCache = {};
        
        let restockingItemsData = [];

        const getCurrentBalance = async () => {
          const response = await apiFetch("/api/v1/store/balance");
          if (!response.ok) {
            console.error("Failed to fetch user balance");
            return null;
          }
          const data = await response.json();
          document.getElementById("balance-display").textContent = t("Overview.Balance", { price: data.balance.toFixed(2).replace(".", ",") });
        };

        const reloadData = () => {
          getCurrentBalance();
          loadRestockingItems();
          const currentCategory = navBar.activeCategoryKey;

          if (!currentCategory) {
            loadData("overview", 1);
            return;
          }

          if (currentCategory === "overview") {
            loadData("overview", 1);
          } else {
            const listElement = document.getElementById(`item-list-${currentCategory}`);
            if (listElement) {
              listElement.innerHTML = "";
              listElement.dataset.page = "1";
              listElement.dataset.loading = "false";
              listElement.dataset.hasMore = "true";
              loadData(currentCategory, 1);
            } else {
              console.error(`Could not find list element for category to reload: ${currentCategory}`);
            }
          }
        };

        const reloadLight = () => {
          getCurrentBalance();
          const currentCategory = navBar.activeCategoryKey;
          if (!currentCategory) return;

          const isOverview = currentCategory === "overview";
          const container = isOverview ? document.getElementById("items-grid") : document.getElementById(`item-list-${currentCategory}`);

          if (!container) {
            console.error(`Could not find container for category: ${currentCategory}`);
            return;
          }

          const itemCards = container.querySelectorAll(".item-card");
          const visibleUuids = Array.from(itemCards).map((card) => card.dataset.uuid);

          const itemsToReorder = visibleUuids.map((uuid) => itemCache[uuid]).filter(Boolean);
          const sortedItems = sortItems(itemsToReorder);
          const newHtml = sortedItems.map((item) => createItemCardHTML(item)).join("");
          container.innerHTML = newHtml;
        };

        const sortItems = (items) => {
          return items.sort((a, b) => {
            const a_is_out_of_stock = a.stock === 0;
            const b_is_out_of_stock = b.stock === 0;
            if (a_is_out_of_stock !== b_is_out_of_stock) {
              return a_is_out_of_stock ? 1 : -1;
            }

            const a_is_favorite = favoriteItems.includes(a.uuid);
            const b_is_favorite = favoriteItems.includes(b.uuid);
            if (a_is_favorite !== b_is_favorite) {
              return a_is_favorite ? -1 : 1;
            }

            return a.name.localeCompare(b.name);
          });
        };

        const getStarIconHTML = (uuid) => {
          if (favoriteItems.includes(uuid)) {
            return `<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" class="w-6 h-6 text-yellow-400"><path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.007z" clip-rule="evenodd" /></svg>`;
          }
          return `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="w-6 h-6 text-gray-400" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z" /></svg>`;
        };

        const createItemCardHTML = (item) => {
          const stockColor = item.stock < item.target_stock * 0.25 ? "text-red-500" : item.stock < item.target_stock * 0.5 ? "text-orange-500" : item.stock < item.target_stock * 0.75 ? "text-yellow-500" : "text-green-500";
          
          const adminSettingsButton = (typeof checkPermission === 'function' && checkPermission("app.admin"))
            ? `
          <a href="/admin/${item.uuid}/edititems"
              class="p-2 rounded-full bg-white/70 backdrop-blur-sm hover:bg-white text-gray-700 shadow-md transition-colors"
              aria-label="Artikel bearbeiten">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-settings"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z" /><path d="M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0" /></svg>
          </a>`
            : "";

          return `
          <div class="relative">
            <div class="buy-overlay-trigger item-card bg-white rounded-xl shadow-lg p-5 h-full flex items-center gap-4 transition-all duration-200 will-change-transform hover:shadow-xl cursor-pointer" data-uuid="${item.uuid}">
              <img src="/i/items/${item.uuid}" alt="${item.name}" class="w-16 h-16 md:w-20 md:h-20 object-cover rounded-lg flex-shrink-0 pointer-events-none">
              <div class="flex-grow flex flex-col min-w-0 pointer-events-none">
                <h3 class="font-bold text-lg text-gray-800 truncate">${item.name}</h3>
                <div class="mt-2 flex items-baseline gap-4 flex-wrap">
                  <p class="text-green-600 font-semibold text-md">${t("Overview.Price", { price: item.price.toFixed(2) })}</p>
                  <p class="text-sm ${stockColor}">${t("Items.InStock", { count: item.stock })}</p>
                </div>
              </div>
            </div>
            <div class="absolute top-2 right-2 flex flex-col items-center gap-2">
              <button class="favorite-button p-1.5 rounded-full bg-white/70 backdrop-blur-sm hover:bg-white text-gray-700 shadow-md transition-colors" data-uuid="${item.uuid}" data-is-favorite="${item.is_favorite}" aria-label="Mark Favorit">
                ${getStarIconHTML(item.uuid)}
              </button>
              ${adminSettingsButton}
            </div>
          </div>
        `;
        };

        let favoriteItems = [];
        let favoriteItemsCache = [];

        const navBar = new BottomNavBar("main-content-container", (selectedKey, isNew) => {
          const list = document.getElementById(`item-list-${selectedKey}`);
          if (isNew && list && list.children.length === 0) loadData(selectedKey, 1);
        });

        navBar.addCategory("Overview", "overview", `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16" /></svg>`, document.getElementById("overview-content"));

        const loadData = async (category = "overview", page = 1) => {
          if (category === "overview") {
            const overviewItemsGrid = document.getElementById("items-grid");
            overviewItemsGrid.innerHTML = `<p class="col-span-full text-center">${t("Items.Loading")}</p>`;
            try {
              const response = await apiFetch(`/api/v1/store/overview`);
              const data = await response.json();
              const sortedFavorites = sortItems(data.favorites);
              data.favorites.forEach((item) => (itemCache[item.uuid] = item));
              document.getElementById("balance-display").textContent = t("Overview.Balance", { price: data.balance.toFixed(2).replace(".", ",") });
              overviewItemsGrid.innerHTML = "";
              sortedFavorites.forEach((item) => {
                favoriteItems.push(item.uuid);
                favoriteItemsCache[item.uuid] = item;
                overviewItemsGrid.innerHTML += createItemCardHTML(item);
              });
              navBar.clearCategories(["overview"]);
              data.categories.forEach((cat) => {
                const catContent = document.createElement("div");
                catContent.id = `content-${cat.name}`;
                catContent.className = "category-content";
                catContent.innerHTML = `
                  <h1 class="text-2xl font-bold px-1">${t(`Categories.${cat.name}`)}</h1>
                  <div class="category-item-list flex flex-col gap-4" id="item-list-${cat.name}"
                        data-page="1" data-loading="false" data-has-more="true"></div>`;
                mainContainer.appendChild(catContent);
                const itemList = catContent.querySelector(".category-item-list");
                itemList.addEventListener("scroll", () => {
                  if (itemList.dataset.hasMore === "true" && itemList.dataset.loading === "false" && itemList.scrollTop + itemList.clientHeight >= itemList.scrollHeight - 300) {
                    loadData(cat.name, parseInt(itemList.dataset.page, 10));
                  }
                });
                navBar.addCategory(cat.name, cat.name, cat.icon, catContent);
              });
            } catch (error) {
              console.error("Error loading overview data:", error);
              overviewItemsGrid.innerHTML = `<p class="col-span-full text-center">${t("Items.ErrorLoading")}</p>`;
            }
          } else {
            const listElement = document.getElementById(`item-list-${category}`);
            if (!listElement || listElement.dataset.loading === "true" || listElement.dataset.hasMore === "false") return;
            listElement.dataset.loading = "true";
            try {
              const response = await apiFetch(`/api/v1/store/categorie/${category}?page=${page}&limit=${ITEMS_PER_PAGE}`);
              const items = await response.json();
              items.forEach((item) => (itemCache[item.uuid] = item));
              const sortedItems = sortItems(items);
              if (items.length > 0) {
                sortedItems.forEach((item) => {
                  listElement.insertAdjacentHTML("beforeend", createItemCardHTML(item));
                });
                listElement.dataset.page = page + 1;
              }
              if (items.length < ITEMS_PER_PAGE) {
                listElement.dataset.hasMore = "false";
              }
            } catch (error) {
              console.error("Error loading category data:", error);
              listElement.innerHTML = `<p class="col-span-full text-center">${t("Items.ErrorLoading")}</p>`;
            } finally {
              listElement.dataset.loading = "false";
            }
          }
        };

        mainContainer.addEventListener("click", async (e) => {
          const buyTriggerCard = e.target.closest(".buy-overlay-trigger");
          const favoriteButton = e.target.closest(".favorite-button");
          if (buyTriggerCard) openBuyPopup(buyTriggerCard.dataset.uuid);
          if (favoriteButton) toggleFavorite(favoriteButton.dataset.uuid, favoriteButton);
        });

        const popupWrapper = document.getElementById("popup-wrapper");
        const popupContent = document.getElementById("buy-popup");

        const openBuyPopup = (uuid) => {
          const item = itemCache[uuid];
          if (!item) return;
          popupContent.dataset.uuid = uuid;
          popupContent.dataset.price = item.price;
          popupContent.dataset.stock = item.stock;
          document.getElementById("popup-item-image").src = `/i/items/${uuid}`;
          document.getElementById("popup-item-name").textContent = item.name;
          document.getElementById("popup-item-price-single").textContent = t("Overview.PricePerItem", { price: item.price.toFixed(2) });
          document.getElementById("popup-stock-info").textContent = `Lager: ${item.stock}`;
          updatePopupQuantity(item.stock > 0 ? 1 : 0);
          popupWrapper.classList.add("active");
          popupWrapper.classList.remove("invisible", "opacity-0");
          popupContent.classList.remove("translate-y-full");
        };

        const closeBuyPopup = () => {
          popupWrapper.classList.remove("active");
          popupWrapper.classList.add("opacity-0");
          popupContent.classList.add("translate-y-full");
          popupWrapper.addEventListener("transitionend", () => {
            if (!popupWrapper.classList.contains("active")) {
              popupWrapper.classList.add("invisible");
            }
          }, { once: true });
        };

        const updatePopupQuantity = (newQuantity) => {
          const quantityDisplay = document.getElementById("quantity-display");
          const plusBtn = document.getElementById("quantity-plus");
          const minusBtn = document.getElementById("quantity-minus");
          const buyBtn = document.getElementById("popup-buy-confirm");
          const basePrice = parseFloat(popupContent.dataset.price);
          const maxStock = parseInt(popupContent.dataset.stock, 10);
          let quantity = Math.max(0, newQuantity);
          quantity = Math.min(quantity, maxStock);
          popupContent.dataset.quantity = quantity;
          quantityDisplay.textContent = quantity;
          const totalPrice = basePrice * quantity;
          buyBtn.textContent = t("Overview.BuyConfirm", { price: totalPrice });
          minusBtn.disabled = quantity <= 1;
          plusBtn.disabled = quantity >= maxStock;
          buyBtn.disabled = quantity === 0;
        };

        document.getElementById("popup-backdrop").addEventListener("click", closeBuyPopup);
        document.getElementById("quantity-minus").addEventListener("click", () => {
          let currentQuantity = parseInt(popupContent.dataset.quantity || "1", 10);
          updatePopupQuantity(currentQuantity - 1);
        });
        document.getElementById("quantity-plus").addEventListener("click", () => {
          let currentQuantity = parseInt(popupContent.dataset.quantity || "1", 10);
          updatePopupQuantity(currentQuantity + 1);
        });
        document.getElementById("popup-buy-confirm").addEventListener("click", async () => {
          const uuid = popupContent.dataset.uuid;
          const quantity = popupContent.dataset.quantity;
          try {
            const response = await apiFetch("/api/v1/store/buy", { method: "POST", body: JSON.stringify({ uuid, quantity }) });
            const buyBtn = document.getElementById("popup-buy-confirm");
            if (response.ok) {
              buyBtn.classList.add("bg-green-500", "hover:bg-green-600");
              buyBtn.textContent = t("Overview.PurchaseSuccess");
              reloadData();
              setTimeout(() => {
                buyBtn.classList.remove("bg-green-500", "hover:bg-green-600");
                closeBuyPopup();
              }, 2500);
            } else {
              const errorData = await response.json();
              buyBtn.classList.add("bg-red-500", "hover:bg-red-600");
              setTimeout(() => {
                buyBtn.classList.remove("bg-red-500", "hover:bg-red-600");
                closeBuyPopup();
              }, 2500);
              if (response.status === 400) {
                buyBtn.textContent = t(`Overview.${errorData.message}`);
              } else {
                buyBtn.textContent = t(`Overview.PurchaseError`);
              }
            }
          } catch (error) {
            alert(`Fehler beim Kauf: ${error.message}`);
          }
        });

        const toggleFavorite = async (uuid, buttonElement) => {
          try {
            await apiFetch(`/api/v1/store/item/${uuid}/favorite`, { method: "POST" });
            const newFavoriteState = !favoriteItems.includes(uuid);
            if (newFavoriteState) {
              favoriteItems.push(uuid);
            } else {
              favoriteItems = favoriteItems.filter((id) => id !== uuid);
            }
            buttonElement.innerHTML = getStarIconHTML(uuid);
            favoriteItemsCache[uuid] = null;
            const overviewItemsGrid = document.getElementById("items-grid");
            overviewItemsGrid.innerHTML = "";
            for (const uuid_key in favoriteItemsCache) {
              const item = favoriteItemsCache[uuid_key];
              if (item) {
                overviewItemsGrid.innerHTML += createItemCardHTML(item);
              }
            }
            reloadLight();
          } catch (error) {
            console.error("Favorite toggle error:", error);
          }
        };

        const restockingPopupWrapper = document.getElementById('restocking-popup-wrapper');
        const restockingItemsList = document.getElementById('restocking-items-list');
        const restockConfirmButton = document.getElementById('restock-confirm-button');
        const restockCloseButton = document.getElementById('restock-close-button');
        const restockingPopupBackdrop = document.getElementById('restocking-popup-backdrop');
        const openRestockBtn = document.getElementById('open-restock-popup-btn');
        
        const updateRestockTotal = () => {
            const totalContainer = document.getElementById('restock-total-container');
            const boughtItems = restockingItemsList.querySelectorAll('.restock-item[data-bought="true"]');
            
            let total = 0;
            const boughtUuids = Array.from(boughtItems).map(item => item.dataset.uuid);

            boughtUuids.forEach(uuid => {
                const itemData = restockingItemsData.find(d => d.uuid === uuid);
                if (itemData) {
                    total += itemData.amount_to_buy * itemData.pack_price;
                }
            });
            
            totalContainer.textContent = t("Overview.RestockItems.TotalPrice", { price: total.toFixed(2) });
        };
        
        const displayRestockingPopup = (items) => {
            restockingItemsList.innerHTML = '';
            items.forEach(item => {
                const itemHTML = `
                        <div class="restock-item flex items-center p-3 border-b border-gray-200" data-uuid="${item.uuid}">
                            <img src="/i/items/${item.uuid}" alt="${item.name}" class="w-12 h-12 object-cover rounded-lg flex-shrink-0 mr-4">
                            <div class="flex-grow min-w-0">
                                <h3 class="font-bold text-lg text-gray-800 truncate">${item.name}</h3>
                                <p class="font-semibold text-gray-800 truncate">${t("Overview.RestockItems.ItemPack", { count: item.pack_size })}</p>
                                <p class="text-sm text-gray-500"><span class="font-medium">${t("Overview.RestockItems.Amount", { count: item.amount_to_buy, price: item.pack_price })}</span></p>
                            </div>
                            <button class="restock-bought-button ml-4 px-3 py-1.5 text-sm font-semibold rounded-lg bg-gray-200 text-gray-700 hover:bg-gray-300 transition-colors flex-shrink-0">${t("Overview.RestockItems.ConfirmButtonBuy")}</button>
                        </div>
                `;
                restockingItemsList.insertAdjacentHTML('beforeend', itemHTML);
            });
            restockingPopupWrapper.classList.remove('invisible', 'opacity-0');
            updateRestockTotal();
        };

        const closeRestockingPopup = () => {
            restockingPopupWrapper.classList.add('opacity-0');
            restockingPopupWrapper.addEventListener('transitionend', () => {
                restockingPopupWrapper.classList.add('invisible');
            }, { once: true });
        };
        
        restockingItemsList.addEventListener('click', (e) => {
            const boughtButton = e.target.closest('.restock-bought-button');
            if (!boughtButton) return;
            const itemElement = boughtButton.closest('.restock-item');
            const isBought = itemElement.dataset.bought === 'true';
            if (isBought) {
                itemElement.dataset.bought = 'false';
                boughtButton.textContent = t("Overview.RestockItems.ConfirmButtonBuy");
                boughtButton.classList.remove('bg-green-500', 'text-white', 'hover:bg-green-600');
                boughtButton.classList.add('bg-gray-200', 'text-gray-700', 'hover:bg-gray-300');
            } else {
                itemElement.dataset.bought = 'true';
                boughtButton.textContent = t("Overview.RestockItems.ConfirmButton");
                boughtButton.classList.remove('bg-gray-200', 'text-gray-700', 'hover:bg-gray-300');
                boughtButton.classList.add('bg-green-500', 'text-white', 'hover:bg-green-600');
            }
            updateRestockTotal();
        });

        restockConfirmButton.addEventListener('click', async () => {
            const boughtItems = restockingItemsList.querySelectorAll('.restock-item[data-bought="true"]');
            const boughtUuids = Array.from(boughtItems).map(item => item.dataset.uuid);
            if (boughtUuids.length === 0) {
                showMessage(t("Overview.RestockItems.NoMarkedItems"), 'error');
                return;
            }
            restockConfirmButton.disabled = true;
            restockConfirmButton.textContent = t("Overview.RestockItems.Processing");
            try {
                const response = await apiFetch('/api/v1/items/restocking/complete', {
                    method: 'POST',
                    body: JSON.stringify({ items: boughtUuids })
                });
                if (!response.ok) {
                  throw new Error('Server responded with an error.');
                }
                showMessage(t("Overview.RestockItems.Success"), 'success');
                closeRestockingPopup();
                reloadData();
            } catch (error) {
                console.error("Error saving restocking transaction:", error);
                showMessage(t("Overview.RestockItems.Error"), 'error');
                alert(error.message);
            } finally {
                restockConfirmButton.disabled = false;
                restockConfirmButton.textContent = t("Overview.RestockItems.CompleteButton");
            }
        });

        restockCloseButton.addEventListener('click', closeRestockingPopup);
        restockingPopupBackdrop.addEventListener('click', closeRestockingPopup);
        
        openRestockBtn.addEventListener('click', () => {
          if (restockingItemsData.length > 0) {
            displayRestockingPopup(restockingItemsData);
          }
        });
        
        const loadRestockingItems = async () => {
          const openRestockBtn = document.getElementById('open-restock-popup-btn');
          try {
            const response = await apiFetch("/api/v1/items/restocking/list");

            if (response.status === 503) {
              openRestockBtn.classList.add('hidden');
              console.warn("Restocking service unavailable (503).");
              return;
            }

            if (!response.ok) {
              openRestockBtn.classList.add('hidden');
              console.error("Failed to fetch restocking items, status:", response.status);
              return;
            }
            
            const data = await response.json();
            
            if (data && data.length > 0) {
              restockingItemsData = data;
              openRestockBtn.classList.remove('hidden');
            } else {
              openRestockBtn.classList.add('hidden');
            }
          } catch (error) {
            openRestockBtn.classList.add('hidden');
            console.error("Error fetching restocking items:", error);
          }
        };

        loadRestockingItems();
        loadData("overview");
      });
    </script>
  </body>
</html>